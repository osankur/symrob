#ifndef __TCHECKER_ALGORITHMS_PROPAGATE_HH__
#define __TCHECKER_ALGORITHMS_PROPAGATE_HH__

#include <queue>

#include "base/memory.hh"

namespace algorithms {

  /*!
    \namespace propagate
    \brief Propagation algorithm
  */
  namespace propagate {

    /*!
      \class update_t
      \brief Update a node with propagated data
      \tparam NODE : type of node
      \tparam PDATA : type of propagated data 
     */
    template <class NODE, class PDATA>
    class update_t : public PDATA {
    public:
      /*!
	\brief Constructor
      */
      update_t() = default;

      /*!
	\brief Constructor
	\param node : node to update
	\param data : propagated data, ti be used to update node
       */
      update_t(sp_t<NODE> & node, PDATA data) : PDATA(data), node(node) {
      }
      
      sp_t<NODE> node; /*!< Node to update */
    };


    /*!
      \class algorithm_t
      \brief Data propagation algorithm
      \tparam NODE : type of node
      \tparam PDATA : type of propagated data
     */
    template <class NODE, class PDATA>
    class algorithm_t {
    public:
      /*!
	\brief Destructor
      */
      virtual ~algorithm_t() = default;

      /*!
	\brief Applies and propagates updates
	\post All the updates in _updates have been applied and propagated
       */
      virtual void apply_then_propagate() {
	while ( ! _updates.empty() ) {
	  auto update = _updates.front();
	  _updates.pop();

	  // Applies update and propagate further if required by application
	  if ( ! on_apply_update(update) )
	    continue;

	  on_propagate_update(update);
	}
      }
    protected:
      /*!
	\brief Event handler called in order to apply an update
	\param update : update to apply
	\post update has been applied
	\return True if update needs to be propagated, false otherwise
       */
      virtual bool on_apply_update(update_t<NODE, PDATA> const & update) = 0;

      /*!
	\brief Event handler called in order to propagate an update
	\param update : update to propagate
	\post All updates propagated from update have been pushed in _updates
       */
      virtual void on_propagate_update(update_t<NODE,PDATA> const & update) = 0;

      /*!< Queue of updates to apply */
      std::queue< update_t<NODE, PDATA> > _updates;
    };

  } // end of namespace propagate

} // end of namespace algorithms

#endif // __TCHECKER_ALGORITHMS_PROPAGATE_HH__
