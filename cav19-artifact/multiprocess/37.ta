<TA><Declaration> var IP0in0 :{0..1}=0;
var IP0in1 :{0..1}=0;
var IP0controllable_c0 :{0..1}=0;
var IP0controllable_c1 :{0..1}=0;
var IP0controllable_s :{0..1}=0;
var LP0benchn13 :{0..1}=0;
var LP0benchbad_out :{0..1}=0;
var LP0benchstate0_out :{0..1}=0;
var LP0benchstate1_out :{0..1}=0;
var IP1in0 :{0..1}=0;
var IP1in1 :{0..1}=0;
var IP1controllable_c0 :{0..1}=0;
var IP1controllable_c1 :{0..1}=0;
var IP1controllable_s :{0..1}=0;
var LP1benchn13 :{0..1}=0;
var LP1benchbad_out :{0..1}=0;
var LP1benchstate0_out :{0..1}=0;
var LP1benchstate1_out :{0..1}=0;
var IP2a0 :{0..1}=0;
var IP2a1 :{0..1}=0;
var IP2a2 :{0..1}=0;
var IP2controllable_c0 :{0..1}=0;
var IP2controllable_c1 :{0..1}=0;
var IP2controllable_c2 :{0..1}=0;
var LP2n15 :{0..1}=0;
var LP2counter0_out :{0..1}=0;
var LP2counter1_out :{0..1}=0;
var LP2counter2_out :{0..1}=0;
var LP2counter3_out :{0..1}=0;

channel go0;
channel go1;
channel go2; // Process i can start
channel release0;
channel release1; // Machine j can be freed
var running0 :{0..2} = 0; // Machine 1 is running process running1. 3 means none
var running1 :{0..2} = 0;
var dead : {0..1} = 0;
var round : {0..2} = 0;
// Is process(i) waiting?
// This is redundant information but don't know how to
// simply access processes' locations
var w0 :{0..1} = 1;
var w1 :{0..1} = 1;
var w2 :{0..1} = 1;

System = Process0() ||| Process1() ||| Process2() ||| Machine0() ||| Machine1();
#define Dead dead==1;
#assert System reaches Dead;

TimedAutomaton Process0
{
clock: x0;
	state w	
	trans: [LP0benchstate0_out == 0] go0? { w0=0; } &lt;x0&gt; -&gt;on0;
	trans: [[x0 &gt;= 8999]] [LP0benchstate0_out == 0] tau { dead=1; } -&gt;dead;
	trans: [LP0benchstate0_out == 1] go0? { w0=0; } &lt;x0&gt; -&gt;on1;
	trans: [[x0 &gt;= 17999]] [LP0benchstate0_out == 1] tau { dead=1; } -&gt;dead;
	endstate

	state on0	
	inv: x0 &lt;= 1000;
	trans: [[x0 &gt;= 1000 &amp;&amp; x0 &lt;= 1000]] [LP0benchstate0_out == 0] tau &lt;x0&gt; -&gt;up;
	endstate

	state on1	
	inv: x0 &lt;= 2000;
	trans: [[x0 &gt;= 2000 &amp;&amp; x0 &lt;= 2000]] [LP0benchstate0_out == 1] tau &lt;x0&gt; -&gt;up;
	endstate

	state dead	
	endstate

	state up	
	committed;
	trans: tau { IP0in0 = 0; } -&gt;JustSetIP0in0;
	trans: tau { IP0in0 = 1; } -&gt;JustSetIP0in0;
	endstate

	state JustSetIP0in0	
	committed;
	trans: tau { IP0in1 = 0; } -&gt;JustSetIP0in1;
	trans: tau { IP0in1 = 1; } -&gt;JustSetIP0in1;
	endstate

	state JustSetIP0in1	
	committed;
	trans: tau { IP0controllable_c0 = 0; } -&gt;JustSetIP0controllable_c0;
	trans: tau { IP0controllable_c0 = 1; } -&gt;JustSetIP0controllable_c0;
	endstate

	state JustSetIP0controllable_c0	
	committed;
	trans: tau { IP0controllable_c1 = 0; } -&gt;JustSetIP0controllable_c1;
	trans: tau { IP0controllable_c1 = 1; } -&gt;JustSetIP0controllable_c1;
	endstate

	state JustSetIP0controllable_c1	
	committed;
	trans: tau { IP0controllable_s = 0; } -&gt;JustSetIP0controllable_s;
	trans: tau { IP0controllable_s = 1; } -&gt;JustSetIP0controllable_s;
	endstate

	state JustSetIP0controllable_s	
	committed;
	trans: tau { LP0benchn13 = 1; } -&gt;UpdatedLP0benchn13;
	endstate

	state UpdatedLP0benchn13	
	committed;
	trans: tau { LP0benchbad_out = (1-((1-((LP0benchbad_out) * (LP0benchn13))) * (1-(IP0controllable_s)))); } -&gt;UpdatedLP0benchbad_out;
	endstate

	state UpdatedLP0benchbad_out	
	committed;
	trans: tau { LP0benchstate0_out = ((1-((((1-(((IP0controllable_c1) * (IP0controllable_c0)) * (1-(IP0in1)))) * (1-((1-((IP0controllable_c1) * (IP0controllable_c0))) * (IP0in1)))) * (1-(IP0in0))) * (1-((LP0benchstate0_out) * (LP0benchn13))))) * (1-((1-(((1-(((IP0controllable_c1) * (IP0controllable_c0)) * (1-(IP0in1)))) * (1-((1-((IP0controllable_c1) * (IP0controllable_c0))) * (IP0in1)))) * (1-(IP0in0)))) * ((LP0benchstate0_out) * (LP0benchn13))))); } -&gt;UpdatedLP0benchstate0_out;
	endstate

	state UpdatedLP0benchstate0_out	
	committed;
	trans: tau { LP0benchstate1_out = (1-((1-((1-((1-(((1-(((IP0controllable_c1) * (IP0controllable_c0)) * (1-(IP0in1)))) * (1-((1-((IP0controllable_c1) * (IP0controllable_c0))) * (IP0in1)))) * (1-(IP0in0)))) * ((LP0benchstate0_out) * (LP0benchn13)))) * ((LP0benchstate1_out) * (LP0benchn13)))) * (1-(((1-(((1-(((IP0controllable_c1) * (IP0controllable_c0)) * (1-(IP0in1)))) * (1-((1-((IP0controllable_c1) * (IP0controllable_c0))) * (IP0in1)))) * (1-(IP0in0)))) * ((LP0benchstate0_out) * (LP0benchn13))) * (1-((LP0benchstate1_out) * (LP0benchn13))))))); } -&gt;UpdatedLP0benchstate1_out;
	endstate

	state UpdatedLP0benchstate1_out	
	committed;
	trans: [running0 == 0] release0! { w0=1 } -&gt;w;
	trans: [running1 == 0] release1! { w0=1 } -&gt;w;
	endstate

}
TimedAutomaton Process1
{
clock: x1;
	state w	
	trans: [LP1benchstate0_out == 0] go1? { w1=0; } &lt;x1&gt; -&gt;on0;
	trans: [[x1 &gt;= 8999]] [LP1benchstate0_out == 0] tau { dead=1; } -&gt;dead;
	trans: [LP1benchstate0_out == 1] go1? { w1=0; } &lt;x1&gt; -&gt;on1;
	trans: [[x1 &gt;= 17999]] [LP1benchstate0_out == 1] tau { dead=1; } -&gt;dead;
	endstate

	state on0	
	inv: x1 &lt;= 1000;
	trans: [[x1 &gt;= 1000 &amp;&amp; x1 &lt;= 1000]] [LP1benchstate0_out == 0] tau &lt;x1&gt; -&gt;up;
	endstate

	state on1	
	inv: x1 &lt;= 2000;
	trans: [[x1 &gt;= 2000 &amp;&amp; x1 &lt;= 2000]] [LP1benchstate0_out == 1] tau &lt;x1&gt; -&gt;up;
	endstate

	state dead	
	endstate

	state up	
	committed;
	trans: tau { IP1in0 = 0; } -&gt;JustSetIP1in0;
	trans: tau { IP1in0 = 1; } -&gt;JustSetIP1in0;
	endstate

	state JustSetIP1in0	
	committed;
	trans: tau { IP1in1 = 0; } -&gt;JustSetIP1in1;
	trans: tau { IP1in1 = 1; } -&gt;JustSetIP1in1;
	endstate

	state JustSetIP1in1	
	committed;
	trans: tau { IP1controllable_c0 = 0; } -&gt;JustSetIP1controllable_c0;
	trans: tau { IP1controllable_c0 = 1; } -&gt;JustSetIP1controllable_c0;
	endstate

	state JustSetIP1controllable_c0	
	committed;
	trans: tau { IP1controllable_c1 = 0; } -&gt;JustSetIP1controllable_c1;
	trans: tau { IP1controllable_c1 = 1; } -&gt;JustSetIP1controllable_c1;
	endstate

	state JustSetIP1controllable_c1	
	committed;
	trans: tau { IP1controllable_s = 0; } -&gt;JustSetIP1controllable_s;
	trans: tau { IP1controllable_s = 1; } -&gt;JustSetIP1controllable_s;
	endstate

	state JustSetIP1controllable_s	
	committed;
	trans: tau { LP1benchn13 = 1; } -&gt;UpdatedLP1benchn13;
	endstate

	state UpdatedLP1benchn13	
	committed;
	trans: tau { LP1benchbad_out = (1-((1-((LP1benchbad_out) * (LP1benchn13))) * (1-(IP1controllable_s)))); } -&gt;UpdatedLP1benchbad_out;
	endstate

	state UpdatedLP1benchbad_out	
	committed;
	trans: tau { LP1benchstate0_out = ((1-((((1-(((IP1controllable_c1) * (IP1controllable_c0)) * (1-(IP1in1)))) * (1-((1-((IP1controllable_c1) * (IP1controllable_c0))) * (IP1in1)))) * (1-(IP1in0))) * (1-((LP1benchstate0_out) * (LP1benchn13))))) * (1-((1-(((1-(((IP1controllable_c1) * (IP1controllable_c0)) * (1-(IP1in1)))) * (1-((1-((IP1controllable_c1) * (IP1controllable_c0))) * (IP1in1)))) * (1-(IP1in0)))) * ((LP1benchstate0_out) * (LP1benchn13))))); } -&gt;UpdatedLP1benchstate0_out;
	endstate

	state UpdatedLP1benchstate0_out	
	committed;
	trans: tau { LP1benchstate1_out = (1-((1-((1-((1-(((1-(((IP1controllable_c1) * (IP1controllable_c0)) * (1-(IP1in1)))) * (1-((1-((IP1controllable_c1) * (IP1controllable_c0))) * (IP1in1)))) * (1-(IP1in0)))) * ((LP1benchstate0_out) * (LP1benchn13)))) * ((LP1benchstate1_out) * (LP1benchn13)))) * (1-(((1-(((1-(((IP1controllable_c1) * (IP1controllable_c0)) * (1-(IP1in1)))) * (1-((1-((IP1controllable_c1) * (IP1controllable_c0))) * (IP1in1)))) * (1-(IP1in0)))) * ((LP1benchstate0_out) * (LP1benchn13))) * (1-((LP1benchstate1_out) * (LP1benchn13))))))); } -&gt;UpdatedLP1benchstate1_out;
	endstate

	state UpdatedLP1benchstate1_out	
	committed;
	trans: [running0 == 1] release0! { w1=1 } -&gt;w;
	trans: [running1 == 1] release1! { w1=1 } -&gt;w;
	endstate

}
TimedAutomaton Process2
{
clock: x2;
	state w	
	trans: [LP2counter0_out == 0] go2? { w2=0; } &lt;x2&gt; -&gt;on0;
	trans: [[x2 &gt;= 8999]] [LP2counter0_out == 0] tau { dead=1; } -&gt;dead;
	trans: [LP2counter0_out == 1] go2? { w2=0; } &lt;x2&gt; -&gt;on1;
	trans: [[x2 &gt;= 17999]] [LP2counter0_out == 1] tau { dead=1; } -&gt;dead;
	endstate

	state on0	
	inv: x2 &lt;= 1000;
	trans: [[x2 &gt;= 1000 &amp;&amp; x2 &lt;= 1000]] [LP2counter0_out == 0] tau &lt;x2&gt; -&gt;up;
	endstate

	state on1	
	inv: x2 &lt;= 2000;
	trans: [[x2 &gt;= 2000 &amp;&amp; x2 &lt;= 2000]] [LP2counter0_out == 1] tau &lt;x2&gt; -&gt;up;
	endstate

	state dead	
	endstate

	state up	
	committed;
	trans: tau { IP2a0 = 0; } -&gt;JustSetIP2a0;
	trans: tau { IP2a0 = 1; } -&gt;JustSetIP2a0;
	endstate

	state JustSetIP2a0	
	committed;
	trans: tau { IP2a1 = 0; } -&gt;JustSetIP2a1;
	trans: tau { IP2a1 = 1; } -&gt;JustSetIP2a1;
	endstate

	state JustSetIP2a1	
	committed;
	trans: tau { IP2a2 = 0; } -&gt;JustSetIP2a2;
	trans: tau { IP2a2 = 1; } -&gt;JustSetIP2a2;
	endstate

	state JustSetIP2a2	
	committed;
	trans: tau { IP2controllable_c0 = 0; } -&gt;JustSetIP2controllable_c0;
	trans: tau { IP2controllable_c0 = 1; } -&gt;JustSetIP2controllable_c0;
	endstate

	state JustSetIP2controllable_c0	
	committed;
	trans: tau { IP2controllable_c1 = 0; } -&gt;JustSetIP2controllable_c1;
	trans: tau { IP2controllable_c1 = 1; } -&gt;JustSetIP2controllable_c1;
	endstate

	state JustSetIP2controllable_c1	
	committed;
	trans: tau { IP2controllable_c2 = 0; } -&gt;JustSetIP2controllable_c2;
	trans: tau { IP2controllable_c2 = 1; } -&gt;JustSetIP2controllable_c2;
	endstate

	state JustSetIP2controllable_c2	
	committed;
	trans: tau { LP2n15 = 1; } -&gt;UpdatedLP2n15;
	endstate

	state UpdatedLP2n15	
	committed;
	trans: tau { LP2counter0_out = (1-((1-(((1-((1-((1-((1-((1-((1-(IP2controllable_c1)) * (IP2controllable_c0))) * (1-((IP2controllable_c1) * (1-(IP2controllable_c0)))))) * (1-(IP2controllable_c2)))) * (1-(((1-((1-(IP2controllable_c1)) * (IP2controllable_c0))) * (1-((IP2controllable_c1) * (1-(IP2controllable_c0))))) * (IP2controllable_c2))))) * ((LP2counter3_out) * (LP2n15)))) * (IP2a0)) * (1-((LP2counter0_out) * (LP2n15))))) * (1-((1-((1-((1-((1-((1-((1-((1-(IP2controllable_c1)) * (IP2controllable_c0))) * (1-((IP2controllable_c1) * (1-(IP2controllable_c0)))))) * (1-(IP2controllable_c2)))) * (1-(((1-((1-(IP2controllable_c1)) * (IP2controllable_c0))) * (1-((IP2controllable_c1) * (1-(IP2controllable_c0))))) * (IP2controllable_c2))))) * ((LP2counter3_out) * (LP2n15)))) * (IP2a0))) * ((LP2counter0_out) * (LP2n15)))))); } -&gt;UpdatedLP2counter0_out;
	endstate

	state UpdatedLP2counter0_out	
	committed;
	trans: tau { LP2counter1_out = ((1-((((1-((1-(((LP2counter0_out) * (LP2n15)) * (IP2a0))) * (1-(IP2a1)))) * (1-((((LP2counter0_out) * (LP2n15)) * (IP2a0)) * (IP2a1)))) * (1-((1-((1-((1-((1-((1-(IP2controllable_c1)) * (IP2controllable_c0))) * (1-((IP2controllable_c1) * (1-(IP2controllable_c0)))))) * (1-(IP2controllable_c2)))) * (1-(((1-((1-(IP2controllable_c1)) * (IP2controllable_c0))) * (1-((IP2controllable_c1) * (1-(IP2controllable_c0))))) * (IP2controllable_c2))))) * ((LP2counter3_out) * (LP2n15))))) * ((LP2counter1_out) * (LP2n15)))) * (1-((1-(((1-((1-(((LP2counter0_out) * (LP2n15)) * (IP2a0))) * (1-(IP2a1)))) * (1-((((LP2counter0_out) * (LP2n15)) * (IP2a0)) * (IP2a1)))) * (1-((1-((1-((1-((1-((1-(IP2controllable_c1)) * (IP2controllable_c0))) * (1-((IP2controllable_c1) * (1-(IP2controllable_c0)))))) * (1-(IP2controllable_c2)))) * (1-(((1-((1-(IP2controllable_c1)) * (IP2controllable_c0))) * (1-((IP2controllable_c1) * (1-(IP2controllable_c0))))) * (IP2controllable_c2))))) * ((LP2counter3_out) * (LP2n15)))))) * (1-((LP2counter1_out) * (LP2n15)))))); } -&gt;UpdatedLP2counter1_out;
	endstate

	state UpdatedLP2counter1_out	
	committed;
	trans: tau { LP2counter2_out = ((1-((((1-((1-((1-((1-((((LP2counter0_out) * (LP2n15)) * (IP2a0)) * (IP2a1))) * (1-((LP2counter1_out) * (LP2n15))))) * (1-((1-(((LP2counter0_out) * (LP2n15)) * (IP2a0))) * (1-(IP2a1)))))) * (1-(IP2a2)))) * (1-(((1-((1-((((LP2counter0_out) * (LP2n15)) * (IP2a0)) * (IP2a1))) * (1-((LP2counter1_out) * (LP2n15))))) * (1-((1-(((LP2counter0_out) * (LP2n15)) * (IP2a0))) * (1-(IP2a1))))) * (IP2a2)))) * (1-((1-((1-((1-((1-((1-(IP2controllable_c1)) * (IP2controllable_c0))) * (1-((IP2controllable_c1) * (1-(IP2controllable_c0)))))) * (1-(IP2controllable_c2)))) * (1-(((1-((1-(IP2controllable_c1)) * (IP2controllable_c0))) * (1-((IP2controllable_c1) * (1-(IP2controllable_c0))))) * (IP2controllable_c2))))) * ((LP2counter3_out) * (LP2n15))))) * ((LP2counter2_out) * (LP2n15)))) * (1-((1-(((1-((1-((1-((1-((((LP2counter0_out) * (LP2n15)) * (IP2a0)) * (IP2a1))) * (1-((LP2counter1_out) * (LP2n15))))) * (1-((1-(((LP2counter0_out) * (LP2n15)) * (IP2a0))) * (1-(IP2a1)))))) * (1-(IP2a2)))) * (1-(((1-((1-((((LP2counter0_out) * (LP2n15)) * (IP2a0)) * (IP2a1))) * (1-((LP2counter1_out) * (LP2n15))))) * (1-((1-(((LP2counter0_out) * (LP2n15)) * (IP2a0))) * (1-(IP2a1))))) * (IP2a2)))) * (1-((1-((1-((1-((1-((1-(IP2controllable_c1)) * (IP2controllable_c0))) * (1-((IP2controllable_c1) * (1-(IP2controllable_c0)))))) * (1-(IP2controllable_c2)))) * (1-(((1-((1-(IP2controllable_c1)) * (IP2controllable_c0))) * (1-((IP2controllable_c1) * (1-(IP2controllable_c0))))) * (IP2controllable_c2))))) * ((LP2counter3_out) * (LP2n15)))))) * (1-((LP2counter2_out) * (LP2n15)))))); } -&gt;UpdatedLP2counter2_out;
	endstate

	state UpdatedLP2counter2_out	
	committed;
	trans: tau { LP2counter3_out = ((1-((1-((1-((1-((1-(((1-((1-((((LP2counter0_out) * (LP2n15)) * (IP2a0)) * (IP2a1))) * (1-((LP2counter1_out) * (LP2n15))))) * (1-((1-(((LP2counter0_out) * (LP2n15)) * (IP2a0))) * (1-(IP2a1))))) * (IP2a2))) * (1-((LP2counter2_out) * (LP2n15))))) * (1-((1-((1-((1-((((LP2counter0_out) * (LP2n15)) * (IP2a0)) * (IP2a1))) * (1-((LP2counter1_out) * (LP2n15))))) * (1-((1-(((LP2counter0_out) * (LP2n15)) * (IP2a0))) * (1-(IP2a1)))))) * (1-(IP2a2)))))) * ((LP2counter3_out) * (LP2n15)))) * (1-(((1-((1-(((1-((1-((((LP2counter0_out) * (LP2n15)) * (IP2a0)) * (IP2a1))) * (1-((LP2counter1_out) * (LP2n15))))) * (1-((1-(((LP2counter0_out) * (LP2n15)) * (IP2a0))) * (1-(IP2a1))))) * (IP2a2))) * (1-((LP2counter2_out) * (LP2n15))))) * (1-((1-((1-((1-((((LP2counter0_out) * (LP2n15)) * (IP2a0)) * (IP2a1))) * (1-((LP2counter1_out) * (LP2n15))))) * (1-((1-(((LP2counter0_out) * (LP2n15)) * (IP2a0))) * (1-(IP2a1)))))) * (1-(IP2a2))))) * (1-((LP2counter3_out) * (LP2n15))))))) * (1-((1-((1-((1-((1-((1-(IP2controllable_c1)) * (IP2controllable_c0))) * (1-((IP2controllable_c1) * (1-(IP2controllable_c0)))))) * (1-(IP2controllable_c2)))) * (1-(((1-((1-(IP2controllable_c1)) * (IP2controllable_c0))) * (1-((IP2controllable_c1) * (1-(IP2controllable_c0))))) * (IP2controllable_c2))))) * ((LP2counter3_out) * (LP2n15))))); } -&gt;UpdatedLP2counter3_out;
	endstate

	state UpdatedLP2counter3_out	
	committed;
	trans: [running0 == 2] release0! { w2=1 } -&gt;w;
	trans: [running1 == 2] release1! { w2=1 } -&gt;w;
	endstate

}
TimedAutomaton Machine0
{

	state idle	
	committed;
	trans: [round == 0 &amp;&amp; w0 == 1] go0! { round = 1;  running0 = 0; } -&gt;busy;
	trans: [round == 0 &amp;&amp; w0 == 0] tau { round = 1; } -&gt;idle;
	trans: [round == 1 &amp;&amp; w1 == 1] go1! { round = 2;  running0 = 1; } -&gt;busy;
	trans: [round == 1 &amp;&amp; w1 == 0] tau { round = 2; } -&gt;idle;
	trans: [round == 2 &amp;&amp; w2 == 1] go2! { round = 0;  running0 = 2; } -&gt;busy;
	trans: [round == 2 &amp;&amp; w2 == 0] tau { round = 0; } -&gt;idle;
	endstate

	state busy	
	trans: release0? { running0 = 2; } -&gt;idle;
	endstate

}
TimedAutomaton Machine1
{

	state idle	
	committed;
	trans: [round == 0 &amp;&amp; w0 == 1] go0! { round = 1;  running1 = 0; } -&gt;busy;
	trans: [round == 0 &amp;&amp; w0 == 0] tau { round = 1; } -&gt;idle;
	trans: [round == 1 &amp;&amp; w1 == 1] go1! { round = 2;  running1 = 1; } -&gt;busy;
	trans: [round == 1 &amp;&amp; w1 == 0] tau { round = 2; } -&gt;idle;
	trans: [round == 2 &amp;&amp; w2 == 1] go2! { round = 0;  running1 = 2; } -&gt;busy;
	trans: [round == 2 &amp;&amp; w2 == 0] tau { round = 0; } -&gt;idle;
	endstate

	state busy	
	trans: release1? { running1 = 2; } -&gt;idle;
	endstate

}
</Declaration><Processes/></TA>
