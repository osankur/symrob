<TA><Declaration> var IP0stay :{0..1}=0;
var IP0controllable_reset :{0..1}=0;
var LP0n7 :{0..1}=0;
var LP0counter0_out :{0..1}=0;
var LP0counter1_out :{0..1}=0;
var LP0counter2_out :{0..1}=0;
var IP1stay :{0..1}=0;
var IP1controllable_reset :{0..1}=0;
var LP1n7 :{0..1}=0;
var LP1counter0_out :{0..1}=0;
var LP1counter1_out :{0..1}=0;
var LP1counter2_out :{0..1}=0;
var IP2stay :{0..1}=0;
var IP2controllable_reset :{0..1}=0;
var LP2n7 :{0..1}=0;
var LP2counter0_out :{0..1}=0;
var LP2counter1_out :{0..1}=0;
var LP2counter2_out :{0..1}=0;

channel go0;
channel go1;
channel go2; // Process i can start
channel release0;
channel release1; // Machine j can be freed
var running0 :{0..2} = 0; // Machine 1 is running process running1. 3 means none
var running1 :{0..2} = 0;
var dead : {0..1} = 0;
var round : {0..2} = 0;
// Is process(i) waiting?
// This is redundant information but don't know how to
// simply access processes' locations
var w0 :{0..1} = 1;
var w1 :{0..1} = 1;
var w2 :{0..1} = 1;

System = Process0() ||| Process1() ||| Process2() ||| Machine0() ||| Machine1();
#define Dead dead==1;
#assert System reaches Dead;

TimedAutomaton Process0
{
clock: x0;
	state w	
	trans: [LP0counter0_out == 0] go0? { w0=0; } &lt;x0&gt; -&gt;on0;
	trans: [[x0 &gt;= 1999]] [LP0counter0_out == 0] tau { dead=1; } -&gt;dead;
	trans: [LP0counter0_out == 1] go0? { w0=0; } &lt;x0&gt; -&gt;on1;
	trans: [[x0 &gt;= 2199]] [LP0counter0_out == 1] tau { dead=1; } -&gt;dead;
	endstate

	state on0	
	inv: x0 &lt;= 1000;
	trans: [[x0 &gt;= 500 &amp;&amp; x0 &lt;= 1000]] [LP0counter0_out == 0] tau &lt;x0&gt; -&gt;up;
	endstate

	state on1	
	inv: x0 &lt;= 800;
	trans: [[x0 &gt;= 400 &amp;&amp; x0 &lt;= 800]] [LP0counter0_out == 1] tau &lt;x0&gt; -&gt;up;
	endstate

	state dead	
	endstate

	state up	
	committed;
	trans: tau { IP0stay = 0; } -&gt;JustSetIP0stay;
	trans: tau { IP0stay = 1; } -&gt;JustSetIP0stay;
	endstate

	state JustSetIP0stay	
	committed;
	trans: tau { IP0controllable_reset = 0; } -&gt;JustSetIP0controllable_reset;
	trans: tau { IP0controllable_reset = 1; } -&gt;JustSetIP0controllable_reset;
	endstate

	state JustSetIP0controllable_reset	
	committed;
	trans: tau { LP0n7 = 1; } -&gt;UpdatedLP0n7;
	endstate

	state UpdatedLP0n7	
	committed;
	trans: tau { LP0counter0_out = (1-((1-((1-((LP0counter0_out) * (LP0n7))) * (1-(IP0stay)))) * (1-(((LP0counter0_out) * (LP0n7)) * (IP0stay))))); } -&gt;UpdatedLP0counter0_out;
	endstate

	state UpdatedLP0counter0_out	
	committed;
	trans: tau { LP0counter1_out = (1-((1-((((LP0counter0_out) * (LP0n7)) * (1-(IP0stay))) * (1-((LP0counter1_out) * (LP0n7))))) * (1-((1-(((LP0counter0_out) * (LP0n7)) * (1-(IP0stay)))) * ((LP0counter1_out) * (LP0n7)))))); } -&gt;UpdatedLP0counter1_out;
	endstate

	state UpdatedLP0counter1_out	
	committed;
	trans: tau { LP0counter2_out = ((1-(((((LP0counter1_out) * (LP0n7)) * ((LP0counter0_out) * (LP0n7))) * ((LP0counter2_out) * (LP0n7))) * (1-(IP0stay)))) * (1-((1-(((((LP0counter1_out) * (LP0n7)) * ((LP0counter0_out) * (LP0n7))) * (1-(IP0controllable_reset))) * (1-(IP0stay)))) * (1-((LP0counter2_out) * (LP0n7)))))); } -&gt;UpdatedLP0counter2_out;
	endstate

	state UpdatedLP0counter2_out	
	committed;
	trans: [running0 == 0] release0! { w0=1 } -&gt;w;
	trans: [running1 == 0] release1! { w0=1 } -&gt;w;
	endstate

}
TimedAutomaton Process1
{
clock: x1;
	state w	
	trans: [LP1counter0_out == 0] go1? { w1=0; } &lt;x1&gt; -&gt;on0;
	trans: [[x1 &gt;= 1999]] [LP1counter0_out == 0] tau { dead=1; } -&gt;dead;
	trans: [LP1counter0_out == 1] go1? { w1=0; } &lt;x1&gt; -&gt;on1;
	trans: [[x1 &gt;= 2199]] [LP1counter0_out == 1] tau { dead=1; } -&gt;dead;
	endstate

	state on0	
	inv: x1 &lt;= 1000;
	trans: [[x1 &gt;= 500 &amp;&amp; x1 &lt;= 1000]] [LP1counter0_out == 0] tau &lt;x1&gt; -&gt;up;
	endstate

	state on1	
	inv: x1 &lt;= 800;
	trans: [[x1 &gt;= 400 &amp;&amp; x1 &lt;= 800]] [LP1counter0_out == 1] tau &lt;x1&gt; -&gt;up;
	endstate

	state dead	
	endstate

	state up	
	committed;
	trans: tau { IP1stay = 0; } -&gt;JustSetIP1stay;
	trans: tau { IP1stay = 1; } -&gt;JustSetIP1stay;
	endstate

	state JustSetIP1stay	
	committed;
	trans: tau { IP1controllable_reset = 0; } -&gt;JustSetIP1controllable_reset;
	trans: tau { IP1controllable_reset = 1; } -&gt;JustSetIP1controllable_reset;
	endstate

	state JustSetIP1controllable_reset	
	committed;
	trans: tau { LP1n7 = 1; } -&gt;UpdatedLP1n7;
	endstate

	state UpdatedLP1n7	
	committed;
	trans: tau { LP1counter0_out = (1-((1-((1-((LP1counter0_out) * (LP1n7))) * (1-(IP1stay)))) * (1-(((LP1counter0_out) * (LP1n7)) * (IP1stay))))); } -&gt;UpdatedLP1counter0_out;
	endstate

	state UpdatedLP1counter0_out	
	committed;
	trans: tau { LP1counter1_out = (1-((1-((((LP1counter0_out) * (LP1n7)) * (1-(IP1stay))) * (1-((LP1counter1_out) * (LP1n7))))) * (1-((1-(((LP1counter0_out) * (LP1n7)) * (1-(IP1stay)))) * ((LP1counter1_out) * (LP1n7)))))); } -&gt;UpdatedLP1counter1_out;
	endstate

	state UpdatedLP1counter1_out	
	committed;
	trans: tau { LP1counter2_out = ((1-(((((LP1counter1_out) * (LP1n7)) * ((LP1counter0_out) * (LP1n7))) * ((LP1counter2_out) * (LP1n7))) * (1-(IP1stay)))) * (1-((1-(((((LP1counter1_out) * (LP1n7)) * ((LP1counter0_out) * (LP1n7))) * (1-(IP1controllable_reset))) * (1-(IP1stay)))) * (1-((LP1counter2_out) * (LP1n7)))))); } -&gt;UpdatedLP1counter2_out;
	endstate

	state UpdatedLP1counter2_out	
	committed;
	trans: [running0 == 1] release0! { w1=1 } -&gt;w;
	trans: [running1 == 1] release1! { w1=1 } -&gt;w;
	endstate

}
TimedAutomaton Process2
{
clock: x2;
	state w	
	trans: [LP2counter0_out == 0] go2? { w2=0; } &lt;x2&gt; -&gt;on0;
	trans: [[x2 &gt;= 1999]] [LP2counter0_out == 0] tau { dead=1; } -&gt;dead;
	trans: [LP2counter0_out == 1] go2? { w2=0; } &lt;x2&gt; -&gt;on1;
	trans: [[x2 &gt;= 2199]] [LP2counter0_out == 1] tau { dead=1; } -&gt;dead;
	endstate

	state on0	
	inv: x2 &lt;= 1000;
	trans: [[x2 &gt;= 500 &amp;&amp; x2 &lt;= 1000]] [LP2counter0_out == 0] tau &lt;x2&gt; -&gt;up;
	endstate

	state on1	
	inv: x2 &lt;= 800;
	trans: [[x2 &gt;= 400 &amp;&amp; x2 &lt;= 800]] [LP2counter0_out == 1] tau &lt;x2&gt; -&gt;up;
	endstate

	state dead	
	endstate

	state up	
	committed;
	trans: tau { IP2stay = 0; } -&gt;JustSetIP2stay;
	trans: tau { IP2stay = 1; } -&gt;JustSetIP2stay;
	endstate

	state JustSetIP2stay	
	committed;
	trans: tau { IP2controllable_reset = 0; } -&gt;JustSetIP2controllable_reset;
	trans: tau { IP2controllable_reset = 1; } -&gt;JustSetIP2controllable_reset;
	endstate

	state JustSetIP2controllable_reset	
	committed;
	trans: tau { LP2n7 = 1; } -&gt;UpdatedLP2n7;
	endstate

	state UpdatedLP2n7	
	committed;
	trans: tau { LP2counter0_out = (1-((1-((1-((LP2counter0_out) * (LP2n7))) * (1-(IP2stay)))) * (1-(((LP2counter0_out) * (LP2n7)) * (IP2stay))))); } -&gt;UpdatedLP2counter0_out;
	endstate

	state UpdatedLP2counter0_out	
	committed;
	trans: tau { LP2counter1_out = (1-((1-((((LP2counter0_out) * (LP2n7)) * (1-(IP2stay))) * (1-((LP2counter1_out) * (LP2n7))))) * (1-((1-(((LP2counter0_out) * (LP2n7)) * (1-(IP2stay)))) * ((LP2counter1_out) * (LP2n7)))))); } -&gt;UpdatedLP2counter1_out;
	endstate

	state UpdatedLP2counter1_out	
	committed;
	trans: tau { LP2counter2_out = ((1-(((((LP2counter1_out) * (LP2n7)) * ((LP2counter0_out) * (LP2n7))) * ((LP2counter2_out) * (LP2n7))) * (1-(IP2stay)))) * (1-((1-(((((LP2counter1_out) * (LP2n7)) * ((LP2counter0_out) * (LP2n7))) * (1-(IP2controllable_reset))) * (1-(IP2stay)))) * (1-((LP2counter2_out) * (LP2n7)))))); } -&gt;UpdatedLP2counter2_out;
	endstate

	state UpdatedLP2counter2_out	
	committed;
	trans: [running0 == 2] release0! { w2=1 } -&gt;w;
	trans: [running1 == 2] release1! { w2=1 } -&gt;w;
	endstate

}
TimedAutomaton Machine0
{

	state idle	
	committed;
	trans: [round == 0 &amp;&amp; w0 == 1] go0! { round = 1;  running0 = 0; } -&gt;busy;
	trans: [round == 0 &amp;&amp; w0 == 0] tau { round = 1; } -&gt;idle;
	trans: [round == 1 &amp;&amp; w1 == 1] go1! { round = 2;  running0 = 1; } -&gt;busy;
	trans: [round == 1 &amp;&amp; w1 == 0] tau { round = 2; } -&gt;idle;
	trans: [round == 2 &amp;&amp; w2 == 1] go2! { round = 0;  running0 = 2; } -&gt;busy;
	trans: [round == 2 &amp;&amp; w2 == 0] tau { round = 0; } -&gt;idle;
	endstate

	state busy	
	trans: release0? { running0 = 2; } -&gt;idle;
	endstate

}
TimedAutomaton Machine1
{

	state idle	
	committed;
	trans: [round == 0 &amp;&amp; w0 == 1] go0! { round = 1;  running1 = 0; } -&gt;busy;
	trans: [round == 0 &amp;&amp; w0 == 0] tau { round = 1; } -&gt;idle;
	trans: [round == 1 &amp;&amp; w1 == 1] go1! { round = 2;  running1 = 1; } -&gt;busy;
	trans: [round == 1 &amp;&amp; w1 == 0] tau { round = 2; } -&gt;idle;
	trans: [round == 2 &amp;&amp; w2 == 1] go2! { round = 0;  running1 = 2; } -&gt;busy;
	trans: [round == 2 &amp;&amp; w2 == 0] tau { round = 0; } -&gt;idle;
	endstate

	state busy	
	trans: release1? { running1 = 2; } -&gt;idle;
	endstate

}
</Declaration><Processes/></TA>
