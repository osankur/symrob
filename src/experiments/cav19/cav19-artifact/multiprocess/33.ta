<TA><Declaration> var IP0a0 :{0..1}=0;
var IP0a1 :{0..1}=0;
var IP0a2 :{0..1}=0;
var IP0controllable_c0 :{0..1}=0;
var IP0controllable_c1 :{0..1}=0;
var IP0controllable_c2 :{0..1}=0;
var LP0n15 :{0..1}=0;
var LP0counter0_out :{0..1}=0;
var LP0counter1_out :{0..1}=0;
var LP0counter2_out :{0..1}=0;
var LP0counter3_out :{0..1}=0;
var IP1a0 :{0..1}=0;
var IP1a1 :{0..1}=0;
var IP1a2 :{0..1}=0;
var IP1controllable_c0 :{0..1}=0;
var IP1controllable_c1 :{0..1}=0;
var IP1controllable_c2 :{0..1}=0;
var LP1n15 :{0..1}=0;
var LP1counter0_out :{0..1}=0;
var LP1counter1_out :{0..1}=0;
var LP1counter2_out :{0..1}=0;
var LP1counter3_out :{0..1}=0;
var IP2a_0_ :{0..1}=0;
var IP2a_1_ :{0..1}=0;
var IP2b_0_ :{0..1}=0;
var IP2b_1_ :{0..1}=0;
var IP2controllable_c_0_ :{0..1}=0;
var IP2controllable_c_1_ :{0..1}=0;
var LP2state_n15 :{0..1}=0;
var LP2err_out :{0..1}=0;

channel go0;
channel go1;
channel go2; // Process i can start
channel release0;
channel release1; // Machine j can be freed
var running0 :{0..2} = 0; // Machine 1 is running process running1. 3 means none
var running1 :{0..2} = 0;
var dead : {0..1} = 0;
var round : {0..2} = 0;
// Is process(i) waiting?
// This is redundant information but don't know how to
// simply access processes' locations
var w0 :{0..1} = 1;
var w1 :{0..1} = 1;
var w2 :{0..1} = 1;

System = Process0() ||| Process1() ||| Process2() ||| Machine0() ||| Machine1();
#define Dead dead==1;
#assert System reaches Dead;

TimedAutomaton Process0
{
clock: x0;
	state w	
	trans: [LP0counter0_out == 0] go0? { w0=0; } &lt;x0&gt; -&gt;on0;
	trans: [[x0 &gt;= 1999]] [LP0counter0_out == 0] tau { dead=1; } -&gt;dead;
	trans: [LP0counter0_out == 1] go0? { w0=0; } &lt;x0&gt; -&gt;on1;
	trans: [[x0 &gt;= 2199]] [LP0counter0_out == 1] tau { dead=1; } -&gt;dead;
	endstate

	state on0	
	inv: x0 &lt;= 1000;
	trans: [[x0 &gt;= 500 &amp;&amp; x0 &lt;= 1000]] [LP0counter0_out == 0] tau &lt;x0&gt; -&gt;up;
	endstate

	state on1	
	inv: x0 &lt;= 800;
	trans: [[x0 &gt;= 400 &amp;&amp; x0 &lt;= 800]] [LP0counter0_out == 1] tau &lt;x0&gt; -&gt;up;
	endstate

	state dead	
	endstate

	state up	
	committed;
	trans: tau { IP0a0 = 0; } -&gt;JustSetIP0a0;
	trans: tau { IP0a0 = 1; } -&gt;JustSetIP0a0;
	endstate

	state JustSetIP0a0	
	committed;
	trans: tau { IP0a1 = 0; } -&gt;JustSetIP0a1;
	trans: tau { IP0a1 = 1; } -&gt;JustSetIP0a1;
	endstate

	state JustSetIP0a1	
	committed;
	trans: tau { IP0a2 = 0; } -&gt;JustSetIP0a2;
	trans: tau { IP0a2 = 1; } -&gt;JustSetIP0a2;
	endstate

	state JustSetIP0a2	
	committed;
	trans: tau { IP0controllable_c0 = 0; } -&gt;JustSetIP0controllable_c0;
	trans: tau { IP0controllable_c0 = 1; } -&gt;JustSetIP0controllable_c0;
	endstate

	state JustSetIP0controllable_c0	
	committed;
	trans: tau { IP0controllable_c1 = 0; } -&gt;JustSetIP0controllable_c1;
	trans: tau { IP0controllable_c1 = 1; } -&gt;JustSetIP0controllable_c1;
	endstate

	state JustSetIP0controllable_c1	
	committed;
	trans: tau { IP0controllable_c2 = 0; } -&gt;JustSetIP0controllable_c2;
	trans: tau { IP0controllable_c2 = 1; } -&gt;JustSetIP0controllable_c2;
	endstate

	state JustSetIP0controllable_c2	
	committed;
	trans: tau { LP0n15 = 1; } -&gt;UpdatedLP0n15;
	endstate

	state UpdatedLP0n15	
	committed;
	trans: tau { LP0counter0_out = (1-((1-(((1-((1-((1-((1-((1-((1-(IP0controllable_c1)) * (IP0controllable_c0))) * (1-((IP0controllable_c1) * (1-(IP0controllable_c0)))))) * (1-(IP0controllable_c2)))) * (1-(((1-((1-(IP0controllable_c1)) * (IP0controllable_c0))) * (1-((IP0controllable_c1) * (1-(IP0controllable_c0))))) * (IP0controllable_c2))))) * ((LP0counter3_out) * (LP0n15)))) * (IP0a0)) * (1-((LP0counter0_out) * (LP0n15))))) * (1-((1-((1-((1-((1-((1-((1-((1-(IP0controllable_c1)) * (IP0controllable_c0))) * (1-((IP0controllable_c1) * (1-(IP0controllable_c0)))))) * (1-(IP0controllable_c2)))) * (1-(((1-((1-(IP0controllable_c1)) * (IP0controllable_c0))) * (1-((IP0controllable_c1) * (1-(IP0controllable_c0))))) * (IP0controllable_c2))))) * ((LP0counter3_out) * (LP0n15)))) * (IP0a0))) * ((LP0counter0_out) * (LP0n15)))))); } -&gt;UpdatedLP0counter0_out;
	endstate

	state UpdatedLP0counter0_out	
	committed;
	trans: tau { LP0counter1_out = ((1-((((1-((1-(((LP0counter0_out) * (LP0n15)) * (IP0a0))) * (1-(IP0a1)))) * (1-((((LP0counter0_out) * (LP0n15)) * (IP0a0)) * (IP0a1)))) * (1-((1-((1-((1-((1-((1-(IP0controllable_c1)) * (IP0controllable_c0))) * (1-((IP0controllable_c1) * (1-(IP0controllable_c0)))))) * (1-(IP0controllable_c2)))) * (1-(((1-((1-(IP0controllable_c1)) * (IP0controllable_c0))) * (1-((IP0controllable_c1) * (1-(IP0controllable_c0))))) * (IP0controllable_c2))))) * ((LP0counter3_out) * (LP0n15))))) * ((LP0counter1_out) * (LP0n15)))) * (1-((1-(((1-((1-(((LP0counter0_out) * (LP0n15)) * (IP0a0))) * (1-(IP0a1)))) * (1-((((LP0counter0_out) * (LP0n15)) * (IP0a0)) * (IP0a1)))) * (1-((1-((1-((1-((1-((1-(IP0controllable_c1)) * (IP0controllable_c0))) * (1-((IP0controllable_c1) * (1-(IP0controllable_c0)))))) * (1-(IP0controllable_c2)))) * (1-(((1-((1-(IP0controllable_c1)) * (IP0controllable_c0))) * (1-((IP0controllable_c1) * (1-(IP0controllable_c0))))) * (IP0controllable_c2))))) * ((LP0counter3_out) * (LP0n15)))))) * (1-((LP0counter1_out) * (LP0n15)))))); } -&gt;UpdatedLP0counter1_out;
	endstate

	state UpdatedLP0counter1_out	
	committed;
	trans: tau { LP0counter2_out = ((1-((((1-((1-((1-((1-((((LP0counter0_out) * (LP0n15)) * (IP0a0)) * (IP0a1))) * (1-((LP0counter1_out) * (LP0n15))))) * (1-((1-(((LP0counter0_out) * (LP0n15)) * (IP0a0))) * (1-(IP0a1)))))) * (1-(IP0a2)))) * (1-(((1-((1-((((LP0counter0_out) * (LP0n15)) * (IP0a0)) * (IP0a1))) * (1-((LP0counter1_out) * (LP0n15))))) * (1-((1-(((LP0counter0_out) * (LP0n15)) * (IP0a0))) * (1-(IP0a1))))) * (IP0a2)))) * (1-((1-((1-((1-((1-((1-(IP0controllable_c1)) * (IP0controllable_c0))) * (1-((IP0controllable_c1) * (1-(IP0controllable_c0)))))) * (1-(IP0controllable_c2)))) * (1-(((1-((1-(IP0controllable_c1)) * (IP0controllable_c0))) * (1-((IP0controllable_c1) * (1-(IP0controllable_c0))))) * (IP0controllable_c2))))) * ((LP0counter3_out) * (LP0n15))))) * ((LP0counter2_out) * (LP0n15)))) * (1-((1-(((1-((1-((1-((1-((((LP0counter0_out) * (LP0n15)) * (IP0a0)) * (IP0a1))) * (1-((LP0counter1_out) * (LP0n15))))) * (1-((1-(((LP0counter0_out) * (LP0n15)) * (IP0a0))) * (1-(IP0a1)))))) * (1-(IP0a2)))) * (1-(((1-((1-((((LP0counter0_out) * (LP0n15)) * (IP0a0)) * (IP0a1))) * (1-((LP0counter1_out) * (LP0n15))))) * (1-((1-(((LP0counter0_out) * (LP0n15)) * (IP0a0))) * (1-(IP0a1))))) * (IP0a2)))) * (1-((1-((1-((1-((1-((1-(IP0controllable_c1)) * (IP0controllable_c0))) * (1-((IP0controllable_c1) * (1-(IP0controllable_c0)))))) * (1-(IP0controllable_c2)))) * (1-(((1-((1-(IP0controllable_c1)) * (IP0controllable_c0))) * (1-((IP0controllable_c1) * (1-(IP0controllable_c0))))) * (IP0controllable_c2))))) * ((LP0counter3_out) * (LP0n15)))))) * (1-((LP0counter2_out) * (LP0n15)))))); } -&gt;UpdatedLP0counter2_out;
	endstate

	state UpdatedLP0counter2_out	
	committed;
	trans: tau { LP0counter3_out = ((1-((1-((1-((1-((1-(((1-((1-((((LP0counter0_out) * (LP0n15)) * (IP0a0)) * (IP0a1))) * (1-((LP0counter1_out) * (LP0n15))))) * (1-((1-(((LP0counter0_out) * (LP0n15)) * (IP0a0))) * (1-(IP0a1))))) * (IP0a2))) * (1-((LP0counter2_out) * (LP0n15))))) * (1-((1-((1-((1-((((LP0counter0_out) * (LP0n15)) * (IP0a0)) * (IP0a1))) * (1-((LP0counter1_out) * (LP0n15))))) * (1-((1-(((LP0counter0_out) * (LP0n15)) * (IP0a0))) * (1-(IP0a1)))))) * (1-(IP0a2)))))) * ((LP0counter3_out) * (LP0n15)))) * (1-(((1-((1-(((1-((1-((((LP0counter0_out) * (LP0n15)) * (IP0a0)) * (IP0a1))) * (1-((LP0counter1_out) * (LP0n15))))) * (1-((1-(((LP0counter0_out) * (LP0n15)) * (IP0a0))) * (1-(IP0a1))))) * (IP0a2))) * (1-((LP0counter2_out) * (LP0n15))))) * (1-((1-((1-((1-((((LP0counter0_out) * (LP0n15)) * (IP0a0)) * (IP0a1))) * (1-((LP0counter1_out) * (LP0n15))))) * (1-((1-(((LP0counter0_out) * (LP0n15)) * (IP0a0))) * (1-(IP0a1)))))) * (1-(IP0a2))))) * (1-((LP0counter3_out) * (LP0n15))))))) * (1-((1-((1-((1-((1-((1-(IP0controllable_c1)) * (IP0controllable_c0))) * (1-((IP0controllable_c1) * (1-(IP0controllable_c0)))))) * (1-(IP0controllable_c2)))) * (1-(((1-((1-(IP0controllable_c1)) * (IP0controllable_c0))) * (1-((IP0controllable_c1) * (1-(IP0controllable_c0))))) * (IP0controllable_c2))))) * ((LP0counter3_out) * (LP0n15))))); } -&gt;UpdatedLP0counter3_out;
	endstate

	state UpdatedLP0counter3_out	
	committed;
	trans: [running0 == 0] release0! { w0=1 } -&gt;w;
	trans: [running1 == 0] release1! { w0=1 } -&gt;w;
	endstate

}
TimedAutomaton Process1
{
clock: x1;
	state w	
	trans: [LP1counter0_out == 0] go1? { w1=0; } &lt;x1&gt; -&gt;on0;
	trans: [[x1 &gt;= 1999]] [LP1counter0_out == 0] tau { dead=1; } -&gt;dead;
	trans: [LP1counter0_out == 1] go1? { w1=0; } &lt;x1&gt; -&gt;on1;
	trans: [[x1 &gt;= 2199]] [LP1counter0_out == 1] tau { dead=1; } -&gt;dead;
	endstate

	state on0	
	inv: x1 &lt;= 1000;
	trans: [[x1 &gt;= 500 &amp;&amp; x1 &lt;= 1000]] [LP1counter0_out == 0] tau &lt;x1&gt; -&gt;up;
	endstate

	state on1	
	inv: x1 &lt;= 800;
	trans: [[x1 &gt;= 400 &amp;&amp; x1 &lt;= 800]] [LP1counter0_out == 1] tau &lt;x1&gt; -&gt;up;
	endstate

	state dead	
	endstate

	state up	
	committed;
	trans: tau { IP1a0 = 0; } -&gt;JustSetIP1a0;
	trans: tau { IP1a0 = 1; } -&gt;JustSetIP1a0;
	endstate

	state JustSetIP1a0	
	committed;
	trans: tau { IP1a1 = 0; } -&gt;JustSetIP1a1;
	trans: tau { IP1a1 = 1; } -&gt;JustSetIP1a1;
	endstate

	state JustSetIP1a1	
	committed;
	trans: tau { IP1a2 = 0; } -&gt;JustSetIP1a2;
	trans: tau { IP1a2 = 1; } -&gt;JustSetIP1a2;
	endstate

	state JustSetIP1a2	
	committed;
	trans: tau { IP1controllable_c0 = 0; } -&gt;JustSetIP1controllable_c0;
	trans: tau { IP1controllable_c0 = 1; } -&gt;JustSetIP1controllable_c0;
	endstate

	state JustSetIP1controllable_c0	
	committed;
	trans: tau { IP1controllable_c1 = 0; } -&gt;JustSetIP1controllable_c1;
	trans: tau { IP1controllable_c1 = 1; } -&gt;JustSetIP1controllable_c1;
	endstate

	state JustSetIP1controllable_c1	
	committed;
	trans: tau { IP1controllable_c2 = 0; } -&gt;JustSetIP1controllable_c2;
	trans: tau { IP1controllable_c2 = 1; } -&gt;JustSetIP1controllable_c2;
	endstate

	state JustSetIP1controllable_c2	
	committed;
	trans: tau { LP1n15 = 1; } -&gt;UpdatedLP1n15;
	endstate

	state UpdatedLP1n15	
	committed;
	trans: tau { LP1counter0_out = (1-((1-(((1-((1-((1-((1-((1-((1-(IP1controllable_c1)) * (IP1controllable_c0))) * (1-((IP1controllable_c1) * (1-(IP1controllable_c0)))))) * (1-(IP1controllable_c2)))) * (1-(((1-((1-(IP1controllable_c1)) * (IP1controllable_c0))) * (1-((IP1controllable_c1) * (1-(IP1controllable_c0))))) * (IP1controllable_c2))))) * ((LP1counter3_out) * (LP1n15)))) * (IP1a0)) * (1-((LP1counter0_out) * (LP1n15))))) * (1-((1-((1-((1-((1-((1-((1-((1-(IP1controllable_c1)) * (IP1controllable_c0))) * (1-((IP1controllable_c1) * (1-(IP1controllable_c0)))))) * (1-(IP1controllable_c2)))) * (1-(((1-((1-(IP1controllable_c1)) * (IP1controllable_c0))) * (1-((IP1controllable_c1) * (1-(IP1controllable_c0))))) * (IP1controllable_c2))))) * ((LP1counter3_out) * (LP1n15)))) * (IP1a0))) * ((LP1counter0_out) * (LP1n15)))))); } -&gt;UpdatedLP1counter0_out;
	endstate

	state UpdatedLP1counter0_out	
	committed;
	trans: tau { LP1counter1_out = ((1-((((1-((1-(((LP1counter0_out) * (LP1n15)) * (IP1a0))) * (1-(IP1a1)))) * (1-((((LP1counter0_out) * (LP1n15)) * (IP1a0)) * (IP1a1)))) * (1-((1-((1-((1-((1-((1-(IP1controllable_c1)) * (IP1controllable_c0))) * (1-((IP1controllable_c1) * (1-(IP1controllable_c0)))))) * (1-(IP1controllable_c2)))) * (1-(((1-((1-(IP1controllable_c1)) * (IP1controllable_c0))) * (1-((IP1controllable_c1) * (1-(IP1controllable_c0))))) * (IP1controllable_c2))))) * ((LP1counter3_out) * (LP1n15))))) * ((LP1counter1_out) * (LP1n15)))) * (1-((1-(((1-((1-(((LP1counter0_out) * (LP1n15)) * (IP1a0))) * (1-(IP1a1)))) * (1-((((LP1counter0_out) * (LP1n15)) * (IP1a0)) * (IP1a1)))) * (1-((1-((1-((1-((1-((1-(IP1controllable_c1)) * (IP1controllable_c0))) * (1-((IP1controllable_c1) * (1-(IP1controllable_c0)))))) * (1-(IP1controllable_c2)))) * (1-(((1-((1-(IP1controllable_c1)) * (IP1controllable_c0))) * (1-((IP1controllable_c1) * (1-(IP1controllable_c0))))) * (IP1controllable_c2))))) * ((LP1counter3_out) * (LP1n15)))))) * (1-((LP1counter1_out) * (LP1n15)))))); } -&gt;UpdatedLP1counter1_out;
	endstate

	state UpdatedLP1counter1_out	
	committed;
	trans: tau { LP1counter2_out = ((1-((((1-((1-((1-((1-((((LP1counter0_out) * (LP1n15)) * (IP1a0)) * (IP1a1))) * (1-((LP1counter1_out) * (LP1n15))))) * (1-((1-(((LP1counter0_out) * (LP1n15)) * (IP1a0))) * (1-(IP1a1)))))) * (1-(IP1a2)))) * (1-(((1-((1-((((LP1counter0_out) * (LP1n15)) * (IP1a0)) * (IP1a1))) * (1-((LP1counter1_out) * (LP1n15))))) * (1-((1-(((LP1counter0_out) * (LP1n15)) * (IP1a0))) * (1-(IP1a1))))) * (IP1a2)))) * (1-((1-((1-((1-((1-((1-(IP1controllable_c1)) * (IP1controllable_c0))) * (1-((IP1controllable_c1) * (1-(IP1controllable_c0)))))) * (1-(IP1controllable_c2)))) * (1-(((1-((1-(IP1controllable_c1)) * (IP1controllable_c0))) * (1-((IP1controllable_c1) * (1-(IP1controllable_c0))))) * (IP1controllable_c2))))) * ((LP1counter3_out) * (LP1n15))))) * ((LP1counter2_out) * (LP1n15)))) * (1-((1-(((1-((1-((1-((1-((((LP1counter0_out) * (LP1n15)) * (IP1a0)) * (IP1a1))) * (1-((LP1counter1_out) * (LP1n15))))) * (1-((1-(((LP1counter0_out) * (LP1n15)) * (IP1a0))) * (1-(IP1a1)))))) * (1-(IP1a2)))) * (1-(((1-((1-((((LP1counter0_out) * (LP1n15)) * (IP1a0)) * (IP1a1))) * (1-((LP1counter1_out) * (LP1n15))))) * (1-((1-(((LP1counter0_out) * (LP1n15)) * (IP1a0))) * (1-(IP1a1))))) * (IP1a2)))) * (1-((1-((1-((1-((1-((1-(IP1controllable_c1)) * (IP1controllable_c0))) * (1-((IP1controllable_c1) * (1-(IP1controllable_c0)))))) * (1-(IP1controllable_c2)))) * (1-(((1-((1-(IP1controllable_c1)) * (IP1controllable_c0))) * (1-((IP1controllable_c1) * (1-(IP1controllable_c0))))) * (IP1controllable_c2))))) * ((LP1counter3_out) * (LP1n15)))))) * (1-((LP1counter2_out) * (LP1n15)))))); } -&gt;UpdatedLP1counter2_out;
	endstate

	state UpdatedLP1counter2_out	
	committed;
	trans: tau { LP1counter3_out = ((1-((1-((1-((1-((1-(((1-((1-((((LP1counter0_out) * (LP1n15)) * (IP1a0)) * (IP1a1))) * (1-((LP1counter1_out) * (LP1n15))))) * (1-((1-(((LP1counter0_out) * (LP1n15)) * (IP1a0))) * (1-(IP1a1))))) * (IP1a2))) * (1-((LP1counter2_out) * (LP1n15))))) * (1-((1-((1-((1-((((LP1counter0_out) * (LP1n15)) * (IP1a0)) * (IP1a1))) * (1-((LP1counter1_out) * (LP1n15))))) * (1-((1-(((LP1counter0_out) * (LP1n15)) * (IP1a0))) * (1-(IP1a1)))))) * (1-(IP1a2)))))) * ((LP1counter3_out) * (LP1n15)))) * (1-(((1-((1-(((1-((1-((((LP1counter0_out) * (LP1n15)) * (IP1a0)) * (IP1a1))) * (1-((LP1counter1_out) * (LP1n15))))) * (1-((1-(((LP1counter0_out) * (LP1n15)) * (IP1a0))) * (1-(IP1a1))))) * (IP1a2))) * (1-((LP1counter2_out) * (LP1n15))))) * (1-((1-((1-((1-((((LP1counter0_out) * (LP1n15)) * (IP1a0)) * (IP1a1))) * (1-((LP1counter1_out) * (LP1n15))))) * (1-((1-(((LP1counter0_out) * (LP1n15)) * (IP1a0))) * (1-(IP1a1)))))) * (1-(IP1a2))))) * (1-((LP1counter3_out) * (LP1n15))))))) * (1-((1-((1-((1-((1-((1-(IP1controllable_c1)) * (IP1controllable_c0))) * (1-((IP1controllable_c1) * (1-(IP1controllable_c0)))))) * (1-(IP1controllable_c2)))) * (1-(((1-((1-(IP1controllable_c1)) * (IP1controllable_c0))) * (1-((IP1controllable_c1) * (1-(IP1controllable_c0))))) * (IP1controllable_c2))))) * ((LP1counter3_out) * (LP1n15))))); } -&gt;UpdatedLP1counter3_out;
	endstate

	state UpdatedLP1counter3_out	
	committed;
	trans: [running0 == 1] release0! { w1=1 } -&gt;w;
	trans: [running1 == 1] release1! { w1=1 } -&gt;w;
	endstate

}
TimedAutomaton Process2
{
clock: x2;
	state w	
	trans: [LP2state_n15 == 0] go2? { w2=0; } &lt;x2&gt; -&gt;on0;
	trans: [[x2 &gt;= 1999]] [LP2state_n15 == 0] tau { dead=1; } -&gt;dead;
	trans: [LP2state_n15 == 1] go2? { w2=0; } &lt;x2&gt; -&gt;on1;
	trans: [[x2 &gt;= 2199]] [LP2state_n15 == 1] tau { dead=1; } -&gt;dead;
	endstate

	state on0	
	inv: x2 &lt;= 1000;
	trans: [[x2 &gt;= 500 &amp;&amp; x2 &lt;= 1000]] [LP2state_n15 == 0] tau &lt;x2&gt; -&gt;up;
	endstate

	state on1	
	inv: x2 &lt;= 800;
	trans: [[x2 &gt;= 400 &amp;&amp; x2 &lt;= 800]] [LP2state_n15 == 1] tau &lt;x2&gt; -&gt;up;
	endstate

	state dead	
	endstate

	state up	
	committed;
	trans: tau { IP2a_0_ = 0; } -&gt;JustSetIP2a_0_;
	trans: tau { IP2a_0_ = 1; } -&gt;JustSetIP2a_0_;
	endstate

	state JustSetIP2a_0_	
	committed;
	trans: tau { IP2a_1_ = 0; } -&gt;JustSetIP2a_1_;
	trans: tau { IP2a_1_ = 1; } -&gt;JustSetIP2a_1_;
	endstate

	state JustSetIP2a_1_	
	committed;
	trans: tau { IP2b_0_ = 0; } -&gt;JustSetIP2b_0_;
	trans: tau { IP2b_0_ = 1; } -&gt;JustSetIP2b_0_;
	endstate

	state JustSetIP2b_0_	
	committed;
	trans: tau { IP2b_1_ = 0; } -&gt;JustSetIP2b_1_;
	trans: tau { IP2b_1_ = 1; } -&gt;JustSetIP2b_1_;
	endstate

	state JustSetIP2b_1_	
	committed;
	trans: tau { IP2controllable_c_0_ = 0; } -&gt;JustSetIP2controllable_c_0_;
	trans: tau { IP2controllable_c_0_ = 1; } -&gt;JustSetIP2controllable_c_0_;
	endstate

	state JustSetIP2controllable_c_0_	
	committed;
	trans: tau { IP2controllable_c_1_ = 0; } -&gt;JustSetIP2controllable_c_1_;
	trans: tau { IP2controllable_c_1_ = 1; } -&gt;JustSetIP2controllable_c_1_;
	endstate

	state JustSetIP2controllable_c_1_	
	committed;
	trans: tau { LP2state_n15 = 1; } -&gt;UpdatedLP2state_n15;
	endstate

	state UpdatedLP2state_n15	
	committed;
	trans: tau { LP2err_out = (1-(((1-(((1-((1-((1-((1-(IP2b_1_)) * (IP2a_1_))) * (1-((IP2b_1_) * (1-(IP2a_1_)))))) * (1-((IP2b_0_) * (IP2a_0_))))) * (1-(((1-((1-(IP2b_1_)) * (IP2a_1_))) * (1-((IP2b_1_) * (1-(IP2a_1_))))) * ((IP2b_0_) * (IP2a_0_))))) * (IP2controllable_c_1_))) * (1-((1-((1-((1-((1-((1-(IP2b_1_)) * (IP2a_1_))) * (1-((IP2b_1_) * (1-(IP2a_1_)))))) * (1-((IP2b_0_) * (IP2a_0_))))) * (1-(((1-((1-(IP2b_1_)) * (IP2a_1_))) * (1-((IP2b_1_) * (1-(IP2a_1_))))) * ((IP2b_0_) * (IP2a_0_)))))) * (1-(IP2controllable_c_1_))))) * ((1-((1-((1-((1-(IP2b_0_)) * (1-(IP2a_0_)))) * (1-((IP2b_0_) * (IP2a_0_))))) * (IP2controllable_c_0_))) * (1-(((1-((1-(IP2b_0_)) * (1-(IP2a_0_)))) * (1-((IP2b_0_) * (IP2a_0_)))) * (1-(IP2controllable_c_0_))))))); } -&gt;UpdatedLP2err_out;
	endstate

	state UpdatedLP2err_out	
	committed;
	trans: [running0 == 2] release0! { w2=1 } -&gt;w;
	trans: [running1 == 2] release1! { w2=1 } -&gt;w;
	endstate

}
TimedAutomaton Machine0
{

	state idle	
	committed;
	trans: [round == 0 &amp;&amp; w0 == 1] go0! { round = 1;  running0 = 0; } -&gt;busy;
	trans: [round == 0 &amp;&amp; w0 == 0] tau { round = 1; } -&gt;idle;
	trans: [round == 1 &amp;&amp; w1 == 1] go1! { round = 2;  running0 = 1; } -&gt;busy;
	trans: [round == 1 &amp;&amp; w1 == 0] tau { round = 2; } -&gt;idle;
	trans: [round == 2 &amp;&amp; w2 == 1] go2! { round = 0;  running0 = 2; } -&gt;busy;
	trans: [round == 2 &amp;&amp; w2 == 0] tau { round = 0; } -&gt;idle;
	endstate

	state busy	
	trans: release0? { running0 = 2; } -&gt;idle;
	endstate

}
TimedAutomaton Machine1
{

	state idle	
	committed;
	trans: [round == 0 &amp;&amp; w0 == 1] go0! { round = 1;  running1 = 0; } -&gt;busy;
	trans: [round == 0 &amp;&amp; w0 == 0] tau { round = 1; } -&gt;idle;
	trans: [round == 1 &amp;&amp; w1 == 1] go1! { round = 2;  running1 = 1; } -&gt;busy;
	trans: [round == 1 &amp;&amp; w1 == 0] tau { round = 2; } -&gt;idle;
	trans: [round == 2 &amp;&amp; w2 == 1] go2! { round = 0;  running1 = 2; } -&gt;busy;
	trans: [round == 2 &amp;&amp; w2 == 0] tau { round = 0; } -&gt;idle;
	endstate

	state busy	
	trans: release1? { running1 = 2; } -&gt;idle;
	endstate

}
</Declaration><Processes/></TA>
