<TA><Declaration> var IP0in0 :{0..1}=0;
var IP0in1 :{0..1}=0;
var IP0in2 :{0..1}=0;
var IP0in3 :{0..1}=0;
var IP0controllable_c0 :{0..1}=0;
var IP0controllable_c1 :{0..1}=0;
var IP0controllable_c2 :{0..1}=0;
var IP0controllable_c3 :{0..1}=0;
var IP0controllable_s :{0..1}=0;
var LP0benchn21 :{0..1}=0;
var LP0benchbad_out :{0..1}=0;
var LP0benchstate0_out :{0..1}=0;
var LP0benchstate1_out :{0..1}=0;
var LP0benchstate2_out :{0..1}=0;
var LP0benchstate3_out :{0..1}=0;
var IP1stay :{0..1}=0;
var IP1controllable_reset :{0..1}=0;
var LP1n7 :{0..1}=0;
var LP1counter0_out :{0..1}=0;
var LP1counter1_out :{0..1}=0;
var LP1counter2_out :{0..1}=0;
var LP1counter3_out :{0..1}=0;
var IP2a_0_ :{0..1}=0;
var IP2a_1_ :{0..1}=0;
var IP2b_0_ :{0..1}=0;
var IP2b_1_ :{0..1}=0;
var IP2controllable_c_0_ :{0..1}=0;
var IP2controllable_c_1_ :{0..1}=0;
var LP2state_n15 :{0..1}=0;
var LP2err_out :{0..1}=0;

channel go0;
channel go1;
channel go2; // Process i can start
channel release0;
channel release1; // Machine j can be freed
var running0 :{0..2} = 0; // Machine 1 is running process running1. 3 means none
var running1 :{0..2} = 0;
var dead : {0..1} = 0;
var round : {0..2} = 0;
// Is process(i) waiting?
// This is redundant information but don't know how to
// simply access processes' locations
var w0 :{0..1} = 1;
var w1 :{0..1} = 1;
var w2 :{0..1} = 1;

System = Process0() ||| Process1() ||| Process2() ||| Machine0() ||| Machine1();
#define Dead dead==1;
#assert System reaches Dead;

TimedAutomaton Process0
{
clock: x0;
	state w	
	trans: [LP0benchstate0_out == 0] go0? { w0=0; } &lt;x0&gt; -&gt;on0;
	trans: [[x0 &gt;= 8999]] [LP0benchstate0_out == 0] tau { dead=1; } -&gt;dead;
	trans: [LP0benchstate0_out == 1] go0? { w0=0; } &lt;x0&gt; -&gt;on1;
	trans: [[x0 &gt;= 17999]] [LP0benchstate0_out == 1] tau { dead=1; } -&gt;dead;
	endstate

	state on0	
	inv: x0 &lt;= 1000;
	trans: [[x0 &gt;= 1000 &amp;&amp; x0 &lt;= 1000]] [LP0benchstate0_out == 0] tau &lt;x0&gt; -&gt;up;
	endstate

	state on1	
	inv: x0 &lt;= 2000;
	trans: [[x0 &gt;= 2000 &amp;&amp; x0 &lt;= 2000]] [LP0benchstate0_out == 1] tau &lt;x0&gt; -&gt;up;
	endstate

	state dead	
	endstate

	state up	
	committed;
	trans: tau { IP0in0 = 0; } -&gt;JustSetIP0in0;
	trans: tau { IP0in0 = 1; } -&gt;JustSetIP0in0;
	endstate

	state JustSetIP0in0	
	committed;
	trans: tau { IP0in1 = 0; } -&gt;JustSetIP0in1;
	trans: tau { IP0in1 = 1; } -&gt;JustSetIP0in1;
	endstate

	state JustSetIP0in1	
	committed;
	trans: tau { IP0in2 = 0; } -&gt;JustSetIP0in2;
	trans: tau { IP0in2 = 1; } -&gt;JustSetIP0in2;
	endstate

	state JustSetIP0in2	
	committed;
	trans: tau { IP0in3 = 0; } -&gt;JustSetIP0in3;
	trans: tau { IP0in3 = 1; } -&gt;JustSetIP0in3;
	endstate

	state JustSetIP0in3	
	committed;
	trans: tau { IP0controllable_c0 = 0; } -&gt;JustSetIP0controllable_c0;
	trans: tau { IP0controllable_c0 = 1; } -&gt;JustSetIP0controllable_c0;
	endstate

	state JustSetIP0controllable_c0	
	committed;
	trans: tau { IP0controllable_c1 = 0; } -&gt;JustSetIP0controllable_c1;
	trans: tau { IP0controllable_c1 = 1; } -&gt;JustSetIP0controllable_c1;
	endstate

	state JustSetIP0controllable_c1	
	committed;
	trans: tau { IP0controllable_c2 = 0; } -&gt;JustSetIP0controllable_c2;
	trans: tau { IP0controllable_c2 = 1; } -&gt;JustSetIP0controllable_c2;
	endstate

	state JustSetIP0controllable_c2	
	committed;
	trans: tau { IP0controllable_c3 = 0; } -&gt;JustSetIP0controllable_c3;
	trans: tau { IP0controllable_c3 = 1; } -&gt;JustSetIP0controllable_c3;
	endstate

	state JustSetIP0controllable_c3	
	committed;
	trans: tau { IP0controllable_s = 0; } -&gt;JustSetIP0controllable_s;
	trans: tau { IP0controllable_s = 1; } -&gt;JustSetIP0controllable_s;
	endstate

	state JustSetIP0controllable_s	
	committed;
	trans: tau { LP0benchn21 = 1; } -&gt;UpdatedLP0benchn21;
	endstate

	state UpdatedLP0benchn21	
	committed;
	trans: tau { LP0benchbad_out = (1-((1-((LP0benchbad_out) * (LP0benchn21))) * (1-(IP0controllable_s)))); } -&gt;UpdatedLP0benchbad_out;
	endstate

	state UpdatedLP0benchbad_out	
	committed;
	trans: tau { LP0benchstate0_out = ((1-((((1-((1-(((1-((1-((1-(IP0controllable_c1)) * (1-(IP0controllable_c0)))) * (IP0controllable_c3))) * (1-(IP0in1))) * (1-(IP0in2)))) * (1-((1-((1-(((1-(IP0in2)) * (1-(IP0controllable_c1))) * ((IP0in1) * (IP0controllable_c0)))) * (1-(((1-((1-((1-(IP0in1)) * (1-(IP0controllable_c0)))) * (1-((IP0in1) * (IP0controllable_c0))))) * (IP0controllable_c1)) * (IP0in2))))) * (IP0controllable_c3))))) * (1-(IP0in0))) * ((1-(((1-((1-(((1-(((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0)))))) * (((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))) * (1-((1-((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0))))))) * (1-(((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))))) * (1-(IP0controllable_c3)))) * ((1-((1-(IP0in0)) * (1-(IP0controllable_c3)))) * (IP0controllable_c2)))) * (1-((((1-(((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0)))))) * (((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))) * (1-((1-((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0))))))) * (1-(((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))))) * (1-(IP0controllable_c3))) * (1-((1-((1-(IP0in0)) * (1-(IP0controllable_c3)))) * (IP0controllable_c2)))))) * (IP0in3))) * (1-((1-((1-((1-(((1-(((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0)))))) * (((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))) * (1-((1-((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0))))))) * (1-(((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))))) * (1-(IP0controllable_c3)))) * ((1-((1-(IP0in0)) * (1-(IP0controllable_c3)))) * (IP0controllable_c2)))) * (1-((((1-(((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0)))))) * (((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))) * (1-((1-((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0))))))) * (1-(((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))))) * (1-(IP0controllable_c3))) * (1-((1-((1-(IP0in0)) * (1-(IP0controllable_c3)))) * (IP0controllable_c2))))))) * (1-(IP0in3)))))) * (1-((LP0benchstate0_out) * (LP0benchn21))))) * (1-((1-(((1-((1-(((1-((1-((1-(IP0controllable_c1)) * (1-(IP0controllable_c0)))) * (IP0controllable_c3))) * (1-(IP0in1))) * (1-(IP0in2)))) * (1-((1-((1-(((1-(IP0in2)) * (1-(IP0controllable_c1))) * ((IP0in1) * (IP0controllable_c0)))) * (1-(((1-((1-((1-(IP0in1)) * (1-(IP0controllable_c0)))) * (1-((IP0in1) * (IP0controllable_c0))))) * (IP0controllable_c1)) * (IP0in2))))) * (IP0controllable_c3))))) * (1-(IP0in0))) * ((1-(((1-((1-(((1-(((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0)))))) * (((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))) * (1-((1-((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0))))))) * (1-(((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))))) * (1-(IP0controllable_c3)))) * ((1-((1-(IP0in0)) * (1-(IP0controllable_c3)))) * (IP0controllable_c2)))) * (1-((((1-(((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0)))))) * (((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))) * (1-((1-((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0))))))) * (1-(((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))))) * (1-(IP0controllable_c3))) * (1-((1-((1-(IP0in0)) * (1-(IP0controllable_c3)))) * (IP0controllable_c2)))))) * (IP0in3))) * (1-((1-((1-((1-(((1-(((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0)))))) * (((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))) * (1-((1-((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0))))))) * (1-(((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))))) * (1-(IP0controllable_c3)))) * ((1-((1-(IP0in0)) * (1-(IP0controllable_c3)))) * (IP0controllable_c2)))) * (1-((((1-(((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0)))))) * (((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))) * (1-((1-((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0))))))) * (1-(((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))))) * (1-(IP0controllable_c3))) * (1-((1-((1-(IP0in0)) * (1-(IP0controllable_c3)))) * (IP0controllable_c2))))))) * (1-(IP0in3))))))) * ((LP0benchstate0_out) * (LP0benchn21))))); } -&gt;UpdatedLP0benchstate0_out;
	endstate

	state UpdatedLP0benchstate0_out	
	committed;
	trans: tau { LP0benchstate1_out = ((1-((1-((1-(((1-((1-(((1-((1-((1-(IP0controllable_c1)) * (1-(IP0controllable_c0)))) * (IP0controllable_c3))) * (1-(IP0in1))) * (1-(IP0in2)))) * (1-((1-((1-(((1-(IP0in2)) * (1-(IP0controllable_c1))) * ((IP0in1) * (IP0controllable_c0)))) * (1-(((1-((1-((1-(IP0in1)) * (1-(IP0controllable_c0)))) * (1-((IP0in1) * (IP0controllable_c0))))) * (IP0controllable_c1)) * (IP0in2))))) * (IP0controllable_c3))))) * (1-(IP0in0))) * ((1-(((1-((1-(((1-(((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0)))))) * (((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))) * (1-((1-((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0))))))) * (1-(((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))))) * (1-(IP0controllable_c3)))) * ((1-((1-(IP0in0)) * (1-(IP0controllable_c3)))) * (IP0controllable_c2)))) * (1-((((1-(((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0)))))) * (((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))) * (1-((1-((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0))))))) * (1-(((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))))) * (1-(IP0controllable_c3))) * (1-((1-((1-(IP0in0)) * (1-(IP0controllable_c3)))) * (IP0controllable_c2)))))) * (IP0in3))) * (1-((1-((1-((1-(((1-(((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0)))))) * (((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))) * (1-((1-((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0))))))) * (1-(((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))))) * (1-(IP0controllable_c3)))) * ((1-((1-(IP0in0)) * (1-(IP0controllable_c3)))) * (IP0controllable_c2)))) * (1-((((1-(((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0)))))) * (((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))) * (1-((1-((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0))))))) * (1-(((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))))) * (1-(IP0controllable_c3))) * (1-((1-((1-(IP0in0)) * (1-(IP0controllable_c3)))) * (IP0controllable_c2))))))) * (1-(IP0in3))))))) * ((LP0benchstate0_out) * (LP0benchn21)))) * (1-((LP0benchstate1_out) * (LP0benchn21))))) * (1-(((1-(((1-((1-(((1-((1-((1-(IP0controllable_c1)) * (1-(IP0controllable_c0)))) * (IP0controllable_c3))) * (1-(IP0in1))) * (1-(IP0in2)))) * (1-((1-((1-(((1-(IP0in2)) * (1-(IP0controllable_c1))) * ((IP0in1) * (IP0controllable_c0)))) * (1-(((1-((1-((1-(IP0in1)) * (1-(IP0controllable_c0)))) * (1-((IP0in1) * (IP0controllable_c0))))) * (IP0controllable_c1)) * (IP0in2))))) * (IP0controllable_c3))))) * (1-(IP0in0))) * ((1-(((1-((1-(((1-(((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0)))))) * (((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))) * (1-((1-((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0))))))) * (1-(((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))))) * (1-(IP0controllable_c3)))) * ((1-((1-(IP0in0)) * (1-(IP0controllable_c3)))) * (IP0controllable_c2)))) * (1-((((1-(((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0)))))) * (((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))) * (1-((1-((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0))))))) * (1-(((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))))) * (1-(IP0controllable_c3))) * (1-((1-((1-(IP0in0)) * (1-(IP0controllable_c3)))) * (IP0controllable_c2)))))) * (IP0in3))) * (1-((1-((1-((1-(((1-(((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0)))))) * (((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))) * (1-((1-((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0))))))) * (1-(((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))))) * (1-(IP0controllable_c3)))) * ((1-((1-(IP0in0)) * (1-(IP0controllable_c3)))) * (IP0controllable_c2)))) * (1-((((1-(((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0)))))) * (((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))) * (1-((1-((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0))))))) * (1-(((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))))) * (1-(IP0controllable_c3))) * (1-((1-((1-(IP0in0)) * (1-(IP0controllable_c3)))) * (IP0controllable_c2))))))) * (1-(IP0in3))))))) * ((LP0benchstate0_out) * (LP0benchn21))) * ((LP0benchstate1_out) * (LP0benchn21))))); } -&gt;UpdatedLP0benchstate1_out;
	endstate

	state UpdatedLP0benchstate1_out	
	committed;
	trans: tau { LP0benchstate2_out = ((1-((1-(((1-(((1-((1-(((1-((1-((1-(IP0controllable_c1)) * (1-(IP0controllable_c0)))) * (IP0controllable_c3))) * (1-(IP0in1))) * (1-(IP0in2)))) * (1-((1-((1-(((1-(IP0in2)) * (1-(IP0controllable_c1))) * ((IP0in1) * (IP0controllable_c0)))) * (1-(((1-((1-((1-(IP0in1)) * (1-(IP0controllable_c0)))) * (1-((IP0in1) * (IP0controllable_c0))))) * (IP0controllable_c1)) * (IP0in2))))) * (IP0controllable_c3))))) * (1-(IP0in0))) * ((1-(((1-((1-(((1-(((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0)))))) * (((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))) * (1-((1-((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0))))))) * (1-(((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))))) * (1-(IP0controllable_c3)))) * ((1-((1-(IP0in0)) * (1-(IP0controllable_c3)))) * (IP0controllable_c2)))) * (1-((((1-(((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0)))))) * (((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))) * (1-((1-((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0))))))) * (1-(((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))))) * (1-(IP0controllable_c3))) * (1-((1-((1-(IP0in0)) * (1-(IP0controllable_c3)))) * (IP0controllable_c2)))))) * (IP0in3))) * (1-((1-((1-((1-(((1-(((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0)))))) * (((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))) * (1-((1-((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0))))))) * (1-(((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))))) * (1-(IP0controllable_c3)))) * ((1-((1-(IP0in0)) * (1-(IP0controllable_c3)))) * (IP0controllable_c2)))) * (1-((((1-(((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0)))))) * (((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))) * (1-((1-((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0))))))) * (1-(((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))))) * (1-(IP0controllable_c3))) * (1-((1-((1-(IP0in0)) * (1-(IP0controllable_c3)))) * (IP0controllable_c2))))))) * (1-(IP0in3))))))) * ((LP0benchstate0_out) * (LP0benchn21))) * ((LP0benchstate1_out) * (LP0benchn21)))) * (1-((LP0benchstate2_out) * (LP0benchn21))))) * (1-((((1-(((1-((1-(((1-((1-((1-(IP0controllable_c1)) * (1-(IP0controllable_c0)))) * (IP0controllable_c3))) * (1-(IP0in1))) * (1-(IP0in2)))) * (1-((1-((1-(((1-(IP0in2)) * (1-(IP0controllable_c1))) * ((IP0in1) * (IP0controllable_c0)))) * (1-(((1-((1-((1-(IP0in1)) * (1-(IP0controllable_c0)))) * (1-((IP0in1) * (IP0controllable_c0))))) * (IP0controllable_c1)) * (IP0in2))))) * (IP0controllable_c3))))) * (1-(IP0in0))) * ((1-(((1-((1-(((1-(((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0)))))) * (((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))) * (1-((1-((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0))))))) * (1-(((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))))) * (1-(IP0controllable_c3)))) * ((1-((1-(IP0in0)) * (1-(IP0controllable_c3)))) * (IP0controllable_c2)))) * (1-((((1-(((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0)))))) * (((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))) * (1-((1-((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0))))))) * (1-(((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))))) * (1-(IP0controllable_c3))) * (1-((1-((1-(IP0in0)) * (1-(IP0controllable_c3)))) * (IP0controllable_c2)))))) * (IP0in3))) * (1-((1-((1-((1-(((1-(((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0)))))) * (((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))) * (1-((1-((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0))))))) * (1-(((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))))) * (1-(IP0controllable_c3)))) * ((1-((1-(IP0in0)) * (1-(IP0controllable_c3)))) * (IP0controllable_c2)))) * (1-((((1-(((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0)))))) * (((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))) * (1-((1-((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0))))))) * (1-(((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))))) * (1-(IP0controllable_c3))) * (1-((1-((1-(IP0in0)) * (1-(IP0controllable_c3)))) * (IP0controllable_c2))))))) * (1-(IP0in3))))))) * ((LP0benchstate0_out) * (LP0benchn21))) * ((LP0benchstate1_out) * (LP0benchn21))) * ((LP0benchstate2_out) * (LP0benchn21))))); } -&gt;UpdatedLP0benchstate2_out;
	endstate

	state UpdatedLP0benchstate2_out	
	committed;
	trans: tau { LP0benchstate3_out = (1-((1-((1-((((1-(((1-((1-(((1-((1-((1-(IP0controllable_c1)) * (1-(IP0controllable_c0)))) * (IP0controllable_c3))) * (1-(IP0in1))) * (1-(IP0in2)))) * (1-((1-((1-(((1-(IP0in2)) * (1-(IP0controllable_c1))) * ((IP0in1) * (IP0controllable_c0)))) * (1-(((1-((1-((1-(IP0in1)) * (1-(IP0controllable_c0)))) * (1-((IP0in1) * (IP0controllable_c0))))) * (IP0controllable_c1)) * (IP0in2))))) * (IP0controllable_c3))))) * (1-(IP0in0))) * ((1-(((1-((1-(((1-(((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0)))))) * (((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))) * (1-((1-((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0))))))) * (1-(((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))))) * (1-(IP0controllable_c3)))) * ((1-((1-(IP0in0)) * (1-(IP0controllable_c3)))) * (IP0controllable_c2)))) * (1-((((1-(((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0)))))) * (((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))) * (1-((1-((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0))))))) * (1-(((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))))) * (1-(IP0controllable_c3))) * (1-((1-((1-(IP0in0)) * (1-(IP0controllable_c3)))) * (IP0controllable_c2)))))) * (IP0in3))) * (1-((1-((1-((1-(((1-(((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0)))))) * (((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))) * (1-((1-((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0))))))) * (1-(((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))))) * (1-(IP0controllable_c3)))) * ((1-((1-(IP0in0)) * (1-(IP0controllable_c3)))) * (IP0controllable_c2)))) * (1-((((1-(((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0)))))) * (((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))) * (1-((1-((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0))))))) * (1-(((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))))) * (1-(IP0controllable_c3))) * (1-((1-((1-(IP0in0)) * (1-(IP0controllable_c3)))) * (IP0controllable_c2))))))) * (1-(IP0in3))))))) * ((LP0benchstate0_out) * (LP0benchn21))) * ((LP0benchstate1_out) * (LP0benchn21))) * ((LP0benchstate2_out) * (LP0benchn21)))) * ((LP0benchstate3_out) * (LP0benchn21)))) * (1-(((((1-(((1-((1-(((1-((1-((1-(IP0controllable_c1)) * (1-(IP0controllable_c0)))) * (IP0controllable_c3))) * (1-(IP0in1))) * (1-(IP0in2)))) * (1-((1-((1-(((1-(IP0in2)) * (1-(IP0controllable_c1))) * ((IP0in1) * (IP0controllable_c0)))) * (1-(((1-((1-((1-(IP0in1)) * (1-(IP0controllable_c0)))) * (1-((IP0in1) * (IP0controllable_c0))))) * (IP0controllable_c1)) * (IP0in2))))) * (IP0controllable_c3))))) * (1-(IP0in0))) * ((1-(((1-((1-(((1-(((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0)))))) * (((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))) * (1-((1-((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0))))))) * (1-(((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))))) * (1-(IP0controllable_c3)))) * ((1-((1-(IP0in0)) * (1-(IP0controllable_c3)))) * (IP0controllable_c2)))) * (1-((((1-(((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0)))))) * (((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))) * (1-((1-((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0))))))) * (1-(((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))))) * (1-(IP0controllable_c3))) * (1-((1-((1-(IP0in0)) * (1-(IP0controllable_c3)))) * (IP0controllable_c2)))))) * (IP0in3))) * (1-((1-((1-((1-(((1-(((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0)))))) * (((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))) * (1-((1-((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0))))))) * (1-(((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))))) * (1-(IP0controllable_c3)))) * ((1-((1-(IP0in0)) * (1-(IP0controllable_c3)))) * (IP0controllable_c2)))) * (1-((((1-(((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0)))))) * (((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))) * (1-((1-((1-(((IP0in1) * (IP0controllable_c1)) * ((IP0in2) * (IP0controllable_c0)))) * (1-((1-((IP0in1) * (IP0controllable_c1))) * (1-((IP0in2) * (IP0controllable_c0))))))) * (1-(((IP0in0) * (IP0controllable_c1)) * ((IP0in1) * (IP0controllable_c0))))))) * (1-(IP0controllable_c3))) * (1-((1-((1-(IP0in0)) * (1-(IP0controllable_c3)))) * (IP0controllable_c2))))))) * (1-(IP0in3))))))) * ((LP0benchstate0_out) * (LP0benchn21))) * ((LP0benchstate1_out) * (LP0benchn21))) * ((LP0benchstate2_out) * (LP0benchn21))) * (1-((LP0benchstate3_out) * (LP0benchn21))))))); } -&gt;UpdatedLP0benchstate3_out;
	endstate

	state UpdatedLP0benchstate3_out	
	committed;
	trans: [running0 == 0] release0! { w0=1 } -&gt;w;
	trans: [running1 == 0] release1! { w0=1 } -&gt;w;
	endstate

}
TimedAutomaton Process1
{
clock: x1;
	state w	
	trans: [LP1counter0_out == 0] go1? { w1=0; } &lt;x1&gt; -&gt;on0;
	trans: [[x1 &gt;= 8999]] [LP1counter0_out == 0] tau { dead=1; } -&gt;dead;
	trans: [LP1counter0_out == 1] go1? { w1=0; } &lt;x1&gt; -&gt;on1;
	trans: [[x1 &gt;= 17999]] [LP1counter0_out == 1] tau { dead=1; } -&gt;dead;
	endstate

	state on0	
	inv: x1 &lt;= 1000;
	trans: [[x1 &gt;= 1000 &amp;&amp; x1 &lt;= 1000]] [LP1counter0_out == 0] tau &lt;x1&gt; -&gt;up;
	endstate

	state on1	
	inv: x1 &lt;= 2000;
	trans: [[x1 &gt;= 2000 &amp;&amp; x1 &lt;= 2000]] [LP1counter0_out == 1] tau &lt;x1&gt; -&gt;up;
	endstate

	state dead	
	endstate

	state up	
	committed;
	trans: tau { IP1stay = 0; } -&gt;JustSetIP1stay;
	trans: tau { IP1stay = 1; } -&gt;JustSetIP1stay;
	endstate

	state JustSetIP1stay	
	committed;
	trans: tau { IP1controllable_reset = 0; } -&gt;JustSetIP1controllable_reset;
	trans: tau { IP1controllable_reset = 1; } -&gt;JustSetIP1controllable_reset;
	endstate

	state JustSetIP1controllable_reset	
	committed;
	trans: tau { LP1n7 = 1; } -&gt;UpdatedLP1n7;
	endstate

	state UpdatedLP1n7	
	committed;
	trans: tau { LP1counter0_out = (1-((1-((1-((LP1counter0_out) * (LP1n7))) * (1-(IP1stay)))) * (1-(((LP1counter0_out) * (LP1n7)) * (IP1stay))))); } -&gt;UpdatedLP1counter0_out;
	endstate

	state UpdatedLP1counter0_out	
	committed;
	trans: tau { LP1counter1_out = (1-((1-((((LP1counter0_out) * (LP1n7)) * (1-(IP1stay))) * (1-((LP1counter1_out) * (LP1n7))))) * (1-((1-(((LP1counter0_out) * (LP1n7)) * (1-(IP1stay)))) * ((LP1counter1_out) * (LP1n7)))))); } -&gt;UpdatedLP1counter1_out;
	endstate

	state UpdatedLP1counter1_out	
	committed;
	trans: tau { LP1counter2_out = (1-((1-(((((LP1counter1_out) * (LP1n7)) * ((LP1counter0_out) * (LP1n7))) * (1-(IP1stay))) * (1-((LP1counter2_out) * (LP1n7))))) * (1-((1-((((LP1counter1_out) * (LP1n7)) * ((LP1counter0_out) * (LP1n7))) * (1-(IP1stay)))) * ((LP1counter2_out) * (LP1n7)))))); } -&gt;UpdatedLP1counter2_out;
	endstate

	state UpdatedLP1counter2_out	
	committed;
	trans: tau { LP1counter3_out = ((1-((1-(((((LP1counter1_out) * (LP1n7)) * ((LP1counter0_out) * (LP1n7))) * ((LP1counter2_out) * (LP1n7))) * (1-(IP1stay)))) * (1-((LP1counter3_out) * (LP1n7))))) * (1-((((((LP1counter1_out) * (LP1n7)) * ((LP1counter0_out) * (LP1n7))) * ((LP1counter2_out) * (LP1n7))) * (1-(IP1stay))) * (1-((1-((LP1counter3_out) * (LP1n7))) * (1-(IP1controllable_reset))))))); } -&gt;UpdatedLP1counter3_out;
	endstate

	state UpdatedLP1counter3_out	
	committed;
	trans: [running0 == 1] release0! { w1=1 } -&gt;w;
	trans: [running1 == 1] release1! { w1=1 } -&gt;w;
	endstate

}
TimedAutomaton Process2
{
clock: x2;
	state w	
	trans: [LP2state_n15 == 0] go2? { w2=0; } &lt;x2&gt; -&gt;on0;
	trans: [[x2 &gt;= 8999]] [LP2state_n15 == 0] tau { dead=1; } -&gt;dead;
	trans: [LP2state_n15 == 1] go2? { w2=0; } &lt;x2&gt; -&gt;on1;
	trans: [[x2 &gt;= 17999]] [LP2state_n15 == 1] tau { dead=1; } -&gt;dead;
	endstate

	state on0	
	inv: x2 &lt;= 1000;
	trans: [[x2 &gt;= 1000 &amp;&amp; x2 &lt;= 1000]] [LP2state_n15 == 0] tau &lt;x2&gt; -&gt;up;
	endstate

	state on1	
	inv: x2 &lt;= 2000;
	trans: [[x2 &gt;= 2000 &amp;&amp; x2 &lt;= 2000]] [LP2state_n15 == 1] tau &lt;x2&gt; -&gt;up;
	endstate

	state dead	
	endstate

	state up	
	committed;
	trans: tau { IP2a_0_ = 0; } -&gt;JustSetIP2a_0_;
	trans: tau { IP2a_0_ = 1; } -&gt;JustSetIP2a_0_;
	endstate

	state JustSetIP2a_0_	
	committed;
	trans: tau { IP2a_1_ = 0; } -&gt;JustSetIP2a_1_;
	trans: tau { IP2a_1_ = 1; } -&gt;JustSetIP2a_1_;
	endstate

	state JustSetIP2a_1_	
	committed;
	trans: tau { IP2b_0_ = 0; } -&gt;JustSetIP2b_0_;
	trans: tau { IP2b_0_ = 1; } -&gt;JustSetIP2b_0_;
	endstate

	state JustSetIP2b_0_	
	committed;
	trans: tau { IP2b_1_ = 0; } -&gt;JustSetIP2b_1_;
	trans: tau { IP2b_1_ = 1; } -&gt;JustSetIP2b_1_;
	endstate

	state JustSetIP2b_1_	
	committed;
	trans: tau { IP2controllable_c_0_ = 0; } -&gt;JustSetIP2controllable_c_0_;
	trans: tau { IP2controllable_c_0_ = 1; } -&gt;JustSetIP2controllable_c_0_;
	endstate

	state JustSetIP2controllable_c_0_	
	committed;
	trans: tau { IP2controllable_c_1_ = 0; } -&gt;JustSetIP2controllable_c_1_;
	trans: tau { IP2controllable_c_1_ = 1; } -&gt;JustSetIP2controllable_c_1_;
	endstate

	state JustSetIP2controllable_c_1_	
	committed;
	trans: tau { LP2state_n15 = 1; } -&gt;UpdatedLP2state_n15;
	endstate

	state UpdatedLP2state_n15	
	committed;
	trans: tau { LP2err_out = (1-(((1-(((1-((1-((1-((1-(IP2b_1_)) * (IP2a_1_))) * (1-((IP2b_1_) * (1-(IP2a_1_)))))) * (1-((IP2b_0_) * (IP2a_0_))))) * (1-(((1-((1-(IP2b_1_)) * (IP2a_1_))) * (1-((IP2b_1_) * (1-(IP2a_1_))))) * ((IP2b_0_) * (IP2a_0_))))) * (IP2controllable_c_1_))) * (1-((1-((1-((1-((1-((1-(IP2b_1_)) * (IP2a_1_))) * (1-((IP2b_1_) * (1-(IP2a_1_)))))) * (1-((IP2b_0_) * (IP2a_0_))))) * (1-(((1-((1-(IP2b_1_)) * (IP2a_1_))) * (1-((IP2b_1_) * (1-(IP2a_1_))))) * ((IP2b_0_) * (IP2a_0_)))))) * (1-(IP2controllable_c_1_))))) * ((1-((1-((1-((1-(IP2b_0_)) * (1-(IP2a_0_)))) * (1-((IP2b_0_) * (IP2a_0_))))) * (IP2controllable_c_0_))) * (1-(((1-((1-(IP2b_0_)) * (1-(IP2a_0_)))) * (1-((IP2b_0_) * (IP2a_0_)))) * (1-(IP2controllable_c_0_))))))); } -&gt;UpdatedLP2err_out;
	endstate

	state UpdatedLP2err_out	
	committed;
	trans: [running0 == 2] release0! { w2=1 } -&gt;w;
	trans: [running1 == 2] release1! { w2=1 } -&gt;w;
	endstate

}
TimedAutomaton Machine0
{

	state idle	
	committed;
	trans: [round == 0 &amp;&amp; w0 == 1] go0! { round = 1;  running0 = 0; } -&gt;busy;
	trans: [round == 0 &amp;&amp; w0 == 0] tau { round = 1; } -&gt;idle;
	trans: [round == 1 &amp;&amp; w1 == 1] go1! { round = 2;  running0 = 1; } -&gt;busy;
	trans: [round == 1 &amp;&amp; w1 == 0] tau { round = 2; } -&gt;idle;
	trans: [round == 2 &amp;&amp; w2 == 1] go2! { round = 0;  running0 = 2; } -&gt;busy;
	trans: [round == 2 &amp;&amp; w2 == 0] tau { round = 0; } -&gt;idle;
	endstate

	state busy	
	trans: release0? { running0 = 2; } -&gt;idle;
	endstate

}
TimedAutomaton Machine1
{

	state idle	
	committed;
	trans: [round == 0 &amp;&amp; w0 == 1] go0! { round = 1;  running1 = 0; } -&gt;busy;
	trans: [round == 0 &amp;&amp; w0 == 0] tau { round = 1; } -&gt;idle;
	trans: [round == 1 &amp;&amp; w1 == 1] go1! { round = 2;  running1 = 1; } -&gt;busy;
	trans: [round == 1 &amp;&amp; w1 == 0] tau { round = 2; } -&gt;idle;
	trans: [round == 2 &amp;&amp; w2 == 1] go2! { round = 0;  running1 = 2; } -&gt;busy;
	trans: [round == 2 &amp;&amp; w2 == 0] tau { round = 0; } -&gt;idle;
	endstate

	state busy	
	trans: release1? { running1 = 2; } -&gt;idle;
	endstate

}
</Declaration><Processes/></TA>
