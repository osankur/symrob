<TA><Declaration> var IP0sh0 :{0..1}=0;
var IP0sh1 :{0..1}=0;
var IP0sh2 :{0..1}=0;
var IP0controllable_do_shift :{0..1}=0;
var LP0state_benchn11 :{0..1}=0;
var LP0state_benchr0_out :{0..1}=0;
var LP0state_benchr1_out :{0..1}=0;
var LP0state_benchr2_out :{0..1}=0;
var LP0state_benchr3_out :{0..1}=0;
var LP0state_benchr4_out :{0..1}=0;
var LP0state_benchr5_out :{0..1}=0;
var LP0state_benchr6_out :{0..1}=0;
var LP0state_benchr7_out :{0..1}=0;
var IP1sh0 :{0..1}=0;
var IP1sh1 :{0..1}=0;
var IP1sh2 :{0..1}=0;
var IP1controllable_do_shift :{0..1}=0;
var LP1state_benchn11 :{0..1}=0;
var LP1state_benchr0_out :{0..1}=0;
var LP1state_benchr1_out :{0..1}=0;
var LP1state_benchr2_out :{0..1}=0;
var LP1state_benchr3_out :{0..1}=0;
var LP1state_benchr4_out :{0..1}=0;
var LP1state_benchr5_out :{0..1}=0;
var LP1state_benchr6_out :{0..1}=0;
var LP1state_benchr7_out :{0..1}=0;
var IP2sh0 :{0..1}=0;
var IP2sh1 :{0..1}=0;
var IP2sh2 :{0..1}=0;
var IP2controllable_do_shift :{0..1}=0;
var LP2state_benchn11 :{0..1}=0;
var LP2state_benchr0_out :{0..1}=0;
var LP2state_benchr1_out :{0..1}=0;
var LP2state_benchr2_out :{0..1}=0;
var LP2state_benchr3_out :{0..1}=0;
var LP2state_benchr4_out :{0..1}=0;
var LP2state_benchr5_out :{0..1}=0;
var LP2state_benchr6_out :{0..1}=0;
var LP2state_benchr7_out :{0..1}=0;

channel go0;
channel go1;
channel go2; // Process i can start
channel release0;
channel release1; // Machine j can be freed
var running0 :{0..2} = 0; // Machine 1 is running process running1. 3 means none
var running1 :{0..2} = 0;
var dead : {0..1} = 0;
var round : {0..2} = 0;
// Is process(i) waiting?
// This is redundant information but don't know how to
// simply access processes' locations
var w0 :{0..1} = 1;
var w1 :{0..1} = 1;
var w2 :{0..1} = 1;

System = Process0() ||| Process1() ||| Process2() ||| Machine0() ||| Machine1();
#define Dead dead==1;
#assert System reaches Dead;

TimedAutomaton Process0
{
clock: x0;
	state w	
	trans: [LP0state_benchn11 == 0] go0? { w0=0; } &lt;x0&gt; -&gt;on0;
	trans: [[x0 &gt;= 499]] [LP0state_benchn11 == 0] tau { dead=1; } -&gt;dead;
	trans: [LP0state_benchn11 == 1] go0? { w0=0; } &lt;x0&gt; -&gt;on1;
	trans: [[x0 &gt;= 799]] [LP0state_benchn11 == 1] tau { dead=1; } -&gt;dead;
	endstate

	state on0	
	inv: x0 &lt;= 1000;
	trans: [[x0 &gt;= 500 &amp;&amp; x0 &lt;= 1000]] [LP0state_benchn11 == 0] tau &lt;x0&gt; -&gt;up;
	endstate

	state on1	
	inv: x0 &lt;= 800;
	trans: [[x0 &gt;= 400 &amp;&amp; x0 &lt;= 800]] [LP0state_benchn11 == 1] tau &lt;x0&gt; -&gt;up;
	endstate

	state dead	
	endstate

	state up	
	committed;
	trans: tau { IP0sh0 = 0; } -&gt;JustSetIP0sh0;
	trans: tau { IP0sh0 = 1; } -&gt;JustSetIP0sh0;
	endstate

	state JustSetIP0sh0	
	committed;
	trans: tau { IP0sh1 = 0; } -&gt;JustSetIP0sh1;
	trans: tau { IP0sh1 = 1; } -&gt;JustSetIP0sh1;
	endstate

	state JustSetIP0sh1	
	committed;
	trans: tau { IP0sh2 = 0; } -&gt;JustSetIP0sh2;
	trans: tau { IP0sh2 = 1; } -&gt;JustSetIP0sh2;
	endstate

	state JustSetIP0sh2	
	committed;
	trans: tau { IP0controllable_do_shift = 0; } -&gt;JustSetIP0controllable_do_shift;
	trans: tau { IP0controllable_do_shift = 1; } -&gt;JustSetIP0controllable_do_shift;
	endstate

	state JustSetIP0controllable_do_shift	
	committed;
	trans: tau { LP0state_benchn11 = 1; } -&gt;UpdatedLP0state_benchn11;
	endstate

	state UpdatedLP0state_benchn11	
	committed;
	trans: tau { LP0state_benchr0_out = (1-((1-((1-((1-(LP0state_benchr0_out)) * (LP0state_benchn11))) * (1-(IP0controllable_do_shift)))) * (1-((1-((1-((1-((1-((1-((1-(LP0state_benchr0_out)) * (LP0state_benchn11))) * (1-(IP0sh0)))) * (1-(((LP0state_benchr7_out) * (LP0state_benchn11)) * (IP0sh0))))) * (1-(IP0sh2)))) * (1-((1-((1-(((LP0state_benchr4_out) * (LP0state_benchn11)) * (1-(IP0sh0)))) * (1-(((LP0state_benchr3_out) * (LP0state_benchn11)) * (IP0sh0))))) * (IP0sh2))))) * (IP0controllable_do_shift))))); } -&gt;UpdatedLP0state_benchr0_out;
	endstate

	state UpdatedLP0state_benchr0_out	
	committed;
	trans: tau { LP0state_benchr1_out = (1-((1-(((LP0state_benchr1_out) * (LP0state_benchn11)) * (1-(IP0controllable_do_shift)))) * (1-((1-((1-((1-((1-(((LP0state_benchr1_out) * (LP0state_benchn11)) * (1-(IP0sh0)))) * (1-((1-((1-(LP0state_benchr0_out)) * (LP0state_benchn11))) * (IP0sh0))))) * (1-(IP0sh2)))) * (1-((1-((1-(((LP0state_benchr5_out) * (LP0state_benchn11)) * (1-(IP0sh0)))) * (1-(((LP0state_benchr4_out) * (LP0state_benchn11)) * (IP0sh0))))) * (IP0sh2))))) * (IP0controllable_do_shift))))); } -&gt;UpdatedLP0state_benchr1_out;
	endstate

	state UpdatedLP0state_benchr1_out	
	committed;
	trans: tau { LP0state_benchr2_out = (1-((1-(((LP0state_benchr2_out) * (LP0state_benchn11)) * (1-(IP0controllable_do_shift)))) * (1-((1-((1-((1-((1-(((LP0state_benchr2_out) * (LP0state_benchn11)) * (1-(IP0sh0)))) * (1-(((LP0state_benchr1_out) * (LP0state_benchn11)) * (IP0sh0))))) * (1-(IP0sh2)))) * (1-((1-((1-(((LP0state_benchr6_out) * (LP0state_benchn11)) * (1-(IP0sh0)))) * (1-(((LP0state_benchr5_out) * (LP0state_benchn11)) * (IP0sh0))))) * (IP0sh2))))) * (IP0controllable_do_shift))))); } -&gt;UpdatedLP0state_benchr2_out;
	endstate

	state UpdatedLP0state_benchr2_out	
	committed;
	trans: tau { LP0state_benchr3_out = (1-((1-(((LP0state_benchr3_out) * (LP0state_benchn11)) * (1-(IP0controllable_do_shift)))) * (1-((1-((1-((1-((1-(((LP0state_benchr3_out) * (LP0state_benchn11)) * (1-(IP0sh0)))) * (1-(((LP0state_benchr2_out) * (LP0state_benchn11)) * (IP0sh0))))) * (1-(IP0sh2)))) * (1-((1-((1-(((LP0state_benchr7_out) * (LP0state_benchn11)) * (1-(IP0sh0)))) * (1-(((LP0state_benchr6_out) * (LP0state_benchn11)) * (IP0sh0))))) * (IP0sh2))))) * (IP0controllable_do_shift))))); } -&gt;UpdatedLP0state_benchr3_out;
	endstate

	state UpdatedLP0state_benchr3_out	
	committed;
	trans: tau { LP0state_benchr4_out = (1-((1-(((LP0state_benchr4_out) * (LP0state_benchn11)) * (1-(IP0controllable_do_shift)))) * (1-((1-((1-((1-((1-(((LP0state_benchr4_out) * (LP0state_benchn11)) * (1-(IP0sh0)))) * (1-(((LP0state_benchr3_out) * (LP0state_benchn11)) * (IP0sh0))))) * (1-(IP0sh2)))) * (1-((1-((1-((1-((1-(LP0state_benchr0_out)) * (LP0state_benchn11))) * (1-(IP0sh0)))) * (1-(((LP0state_benchr7_out) * (LP0state_benchn11)) * (IP0sh0))))) * (IP0sh2))))) * (IP0controllable_do_shift))))); } -&gt;UpdatedLP0state_benchr4_out;
	endstate

	state UpdatedLP0state_benchr4_out	
	committed;
	trans: tau { LP0state_benchr5_out = (1-((1-(((LP0state_benchr5_out) * (LP0state_benchn11)) * (1-(IP0controllable_do_shift)))) * (1-((1-((1-((1-((1-(((LP0state_benchr5_out) * (LP0state_benchn11)) * (1-(IP0sh0)))) * (1-(((LP0state_benchr4_out) * (LP0state_benchn11)) * (IP0sh0))))) * (1-(IP0sh2)))) * (1-((1-((1-(((LP0state_benchr1_out) * (LP0state_benchn11)) * (1-(IP0sh0)))) * (1-((1-((1-(LP0state_benchr0_out)) * (LP0state_benchn11))) * (IP0sh0))))) * (IP0sh2))))) * (IP0controllable_do_shift))))); } -&gt;UpdatedLP0state_benchr5_out;
	endstate

	state UpdatedLP0state_benchr5_out	
	committed;
	trans: tau { LP0state_benchr6_out = (1-((1-(((LP0state_benchr6_out) * (LP0state_benchn11)) * (1-(IP0controllable_do_shift)))) * (1-((1-((1-((1-((1-(((LP0state_benchr6_out) * (LP0state_benchn11)) * (1-(IP0sh0)))) * (1-(((LP0state_benchr5_out) * (LP0state_benchn11)) * (IP0sh0))))) * (1-(IP0sh2)))) * (1-((1-((1-(((LP0state_benchr2_out) * (LP0state_benchn11)) * (1-(IP0sh0)))) * (1-(((LP0state_benchr1_out) * (LP0state_benchn11)) * (IP0sh0))))) * (IP0sh2))))) * (IP0controllable_do_shift))))); } -&gt;UpdatedLP0state_benchr6_out;
	endstate

	state UpdatedLP0state_benchr6_out	
	committed;
	trans: tau { LP0state_benchr7_out = (1-((1-(((LP0state_benchr7_out) * (LP0state_benchn11)) * (1-(IP0controllable_do_shift)))) * (1-((1-((1-((1-((1-(((LP0state_benchr7_out) * (LP0state_benchn11)) * (1-(IP0sh0)))) * (1-(((LP0state_benchr6_out) * (LP0state_benchn11)) * (IP0sh0))))) * (1-(IP0sh2)))) * (1-((1-((1-(((LP0state_benchr3_out) * (LP0state_benchn11)) * (1-(IP0sh0)))) * (1-(((LP0state_benchr2_out) * (LP0state_benchn11)) * (IP0sh0))))) * (IP0sh2))))) * (IP0controllable_do_shift))))); } -&gt;UpdatedLP0state_benchr7_out;
	endstate

	state UpdatedLP0state_benchr7_out	
	committed;
	trans: [running0 == 0] release0! { w0=1 } -&gt;w;
	trans: [running1 == 0] release1! { w0=1 } -&gt;w;
	endstate

}
TimedAutomaton Process1
{
clock: x1;
	state w	
	trans: [LP1state_benchn11 == 0] go1? { w1=0; } &lt;x1&gt; -&gt;on0;
	trans: [[x1 &gt;= 499]] [LP1state_benchn11 == 0] tau { dead=1; } -&gt;dead;
	trans: [LP1state_benchn11 == 1] go1? { w1=0; } &lt;x1&gt; -&gt;on1;
	trans: [[x1 &gt;= 799]] [LP1state_benchn11 == 1] tau { dead=1; } -&gt;dead;
	endstate

	state on0	
	inv: x1 &lt;= 1000;
	trans: [[x1 &gt;= 500 &amp;&amp; x1 &lt;= 1000]] [LP1state_benchn11 == 0] tau &lt;x1&gt; -&gt;up;
	endstate

	state on1	
	inv: x1 &lt;= 800;
	trans: [[x1 &gt;= 400 &amp;&amp; x1 &lt;= 800]] [LP1state_benchn11 == 1] tau &lt;x1&gt; -&gt;up;
	endstate

	state dead	
	endstate

	state up	
	committed;
	trans: tau { IP1sh0 = 0; } -&gt;JustSetIP1sh0;
	trans: tau { IP1sh0 = 1; } -&gt;JustSetIP1sh0;
	endstate

	state JustSetIP1sh0	
	committed;
	trans: tau { IP1sh1 = 0; } -&gt;JustSetIP1sh1;
	trans: tau { IP1sh1 = 1; } -&gt;JustSetIP1sh1;
	endstate

	state JustSetIP1sh1	
	committed;
	trans: tau { IP1sh2 = 0; } -&gt;JustSetIP1sh2;
	trans: tau { IP1sh2 = 1; } -&gt;JustSetIP1sh2;
	endstate

	state JustSetIP1sh2	
	committed;
	trans: tau { IP1controllable_do_shift = 0; } -&gt;JustSetIP1controllable_do_shift;
	trans: tau { IP1controllable_do_shift = 1; } -&gt;JustSetIP1controllable_do_shift;
	endstate

	state JustSetIP1controllable_do_shift	
	committed;
	trans: tau { LP1state_benchn11 = 1; } -&gt;UpdatedLP1state_benchn11;
	endstate

	state UpdatedLP1state_benchn11	
	committed;
	trans: tau { LP1state_benchr0_out = (1-((1-((1-((1-(LP1state_benchr0_out)) * (LP1state_benchn11))) * (1-(IP1controllable_do_shift)))) * (1-((1-((1-((1-((1-((1-((1-(LP1state_benchr0_out)) * (LP1state_benchn11))) * (1-(IP1sh0)))) * (1-(((LP1state_benchr7_out) * (LP1state_benchn11)) * (IP1sh0))))) * (1-(IP1sh2)))) * (1-((1-((1-(((LP1state_benchr4_out) * (LP1state_benchn11)) * (1-(IP1sh0)))) * (1-(((LP1state_benchr3_out) * (LP1state_benchn11)) * (IP1sh0))))) * (IP1sh2))))) * (IP1controllable_do_shift))))); } -&gt;UpdatedLP1state_benchr0_out;
	endstate

	state UpdatedLP1state_benchr0_out	
	committed;
	trans: tau { LP1state_benchr1_out = (1-((1-(((LP1state_benchr1_out) * (LP1state_benchn11)) * (1-(IP1controllable_do_shift)))) * (1-((1-((1-((1-((1-(((LP1state_benchr1_out) * (LP1state_benchn11)) * (1-(IP1sh0)))) * (1-((1-((1-(LP1state_benchr0_out)) * (LP1state_benchn11))) * (IP1sh0))))) * (1-(IP1sh2)))) * (1-((1-((1-(((LP1state_benchr5_out) * (LP1state_benchn11)) * (1-(IP1sh0)))) * (1-(((LP1state_benchr4_out) * (LP1state_benchn11)) * (IP1sh0))))) * (IP1sh2))))) * (IP1controllable_do_shift))))); } -&gt;UpdatedLP1state_benchr1_out;
	endstate

	state UpdatedLP1state_benchr1_out	
	committed;
	trans: tau { LP1state_benchr2_out = (1-((1-(((LP1state_benchr2_out) * (LP1state_benchn11)) * (1-(IP1controllable_do_shift)))) * (1-((1-((1-((1-((1-(((LP1state_benchr2_out) * (LP1state_benchn11)) * (1-(IP1sh0)))) * (1-(((LP1state_benchr1_out) * (LP1state_benchn11)) * (IP1sh0))))) * (1-(IP1sh2)))) * (1-((1-((1-(((LP1state_benchr6_out) * (LP1state_benchn11)) * (1-(IP1sh0)))) * (1-(((LP1state_benchr5_out) * (LP1state_benchn11)) * (IP1sh0))))) * (IP1sh2))))) * (IP1controllable_do_shift))))); } -&gt;UpdatedLP1state_benchr2_out;
	endstate

	state UpdatedLP1state_benchr2_out	
	committed;
	trans: tau { LP1state_benchr3_out = (1-((1-(((LP1state_benchr3_out) * (LP1state_benchn11)) * (1-(IP1controllable_do_shift)))) * (1-((1-((1-((1-((1-(((LP1state_benchr3_out) * (LP1state_benchn11)) * (1-(IP1sh0)))) * (1-(((LP1state_benchr2_out) * (LP1state_benchn11)) * (IP1sh0))))) * (1-(IP1sh2)))) * (1-((1-((1-(((LP1state_benchr7_out) * (LP1state_benchn11)) * (1-(IP1sh0)))) * (1-(((LP1state_benchr6_out) * (LP1state_benchn11)) * (IP1sh0))))) * (IP1sh2))))) * (IP1controllable_do_shift))))); } -&gt;UpdatedLP1state_benchr3_out;
	endstate

	state UpdatedLP1state_benchr3_out	
	committed;
	trans: tau { LP1state_benchr4_out = (1-((1-(((LP1state_benchr4_out) * (LP1state_benchn11)) * (1-(IP1controllable_do_shift)))) * (1-((1-((1-((1-((1-(((LP1state_benchr4_out) * (LP1state_benchn11)) * (1-(IP1sh0)))) * (1-(((LP1state_benchr3_out) * (LP1state_benchn11)) * (IP1sh0))))) * (1-(IP1sh2)))) * (1-((1-((1-((1-((1-(LP1state_benchr0_out)) * (LP1state_benchn11))) * (1-(IP1sh0)))) * (1-(((LP1state_benchr7_out) * (LP1state_benchn11)) * (IP1sh0))))) * (IP1sh2))))) * (IP1controllable_do_shift))))); } -&gt;UpdatedLP1state_benchr4_out;
	endstate

	state UpdatedLP1state_benchr4_out	
	committed;
	trans: tau { LP1state_benchr5_out = (1-((1-(((LP1state_benchr5_out) * (LP1state_benchn11)) * (1-(IP1controllable_do_shift)))) * (1-((1-((1-((1-((1-(((LP1state_benchr5_out) * (LP1state_benchn11)) * (1-(IP1sh0)))) * (1-(((LP1state_benchr4_out) * (LP1state_benchn11)) * (IP1sh0))))) * (1-(IP1sh2)))) * (1-((1-((1-(((LP1state_benchr1_out) * (LP1state_benchn11)) * (1-(IP1sh0)))) * (1-((1-((1-(LP1state_benchr0_out)) * (LP1state_benchn11))) * (IP1sh0))))) * (IP1sh2))))) * (IP1controllable_do_shift))))); } -&gt;UpdatedLP1state_benchr5_out;
	endstate

	state UpdatedLP1state_benchr5_out	
	committed;
	trans: tau { LP1state_benchr6_out = (1-((1-(((LP1state_benchr6_out) * (LP1state_benchn11)) * (1-(IP1controllable_do_shift)))) * (1-((1-((1-((1-((1-(((LP1state_benchr6_out) * (LP1state_benchn11)) * (1-(IP1sh0)))) * (1-(((LP1state_benchr5_out) * (LP1state_benchn11)) * (IP1sh0))))) * (1-(IP1sh2)))) * (1-((1-((1-(((LP1state_benchr2_out) * (LP1state_benchn11)) * (1-(IP1sh0)))) * (1-(((LP1state_benchr1_out) * (LP1state_benchn11)) * (IP1sh0))))) * (IP1sh2))))) * (IP1controllable_do_shift))))); } -&gt;UpdatedLP1state_benchr6_out;
	endstate

	state UpdatedLP1state_benchr6_out	
	committed;
	trans: tau { LP1state_benchr7_out = (1-((1-(((LP1state_benchr7_out) * (LP1state_benchn11)) * (1-(IP1controllable_do_shift)))) * (1-((1-((1-((1-((1-(((LP1state_benchr7_out) * (LP1state_benchn11)) * (1-(IP1sh0)))) * (1-(((LP1state_benchr6_out) * (LP1state_benchn11)) * (IP1sh0))))) * (1-(IP1sh2)))) * (1-((1-((1-(((LP1state_benchr3_out) * (LP1state_benchn11)) * (1-(IP1sh0)))) * (1-(((LP1state_benchr2_out) * (LP1state_benchn11)) * (IP1sh0))))) * (IP1sh2))))) * (IP1controllable_do_shift))))); } -&gt;UpdatedLP1state_benchr7_out;
	endstate

	state UpdatedLP1state_benchr7_out	
	committed;
	trans: [running0 == 1] release0! { w1=1 } -&gt;w;
	trans: [running1 == 1] release1! { w1=1 } -&gt;w;
	endstate

}
TimedAutomaton Process2
{
clock: x2;
	state w	
	trans: [LP2state_benchn11 == 0] go2? { w2=0; } &lt;x2&gt; -&gt;on0;
	trans: [[x2 &gt;= 499]] [LP2state_benchn11 == 0] tau { dead=1; } -&gt;dead;
	trans: [LP2state_benchn11 == 1] go2? { w2=0; } &lt;x2&gt; -&gt;on1;
	trans: [[x2 &gt;= 799]] [LP2state_benchn11 == 1] tau { dead=1; } -&gt;dead;
	endstate

	state on0	
	inv: x2 &lt;= 1000;
	trans: [[x2 &gt;= 500 &amp;&amp; x2 &lt;= 1000]] [LP2state_benchn11 == 0] tau &lt;x2&gt; -&gt;up;
	endstate

	state on1	
	inv: x2 &lt;= 800;
	trans: [[x2 &gt;= 400 &amp;&amp; x2 &lt;= 800]] [LP2state_benchn11 == 1] tau &lt;x2&gt; -&gt;up;
	endstate

	state dead	
	endstate

	state up	
	committed;
	trans: tau { IP2sh0 = 0; } -&gt;JustSetIP2sh0;
	trans: tau { IP2sh0 = 1; } -&gt;JustSetIP2sh0;
	endstate

	state JustSetIP2sh0	
	committed;
	trans: tau { IP2sh1 = 0; } -&gt;JustSetIP2sh1;
	trans: tau { IP2sh1 = 1; } -&gt;JustSetIP2sh1;
	endstate

	state JustSetIP2sh1	
	committed;
	trans: tau { IP2sh2 = 0; } -&gt;JustSetIP2sh2;
	trans: tau { IP2sh2 = 1; } -&gt;JustSetIP2sh2;
	endstate

	state JustSetIP2sh2	
	committed;
	trans: tau { IP2controllable_do_shift = 0; } -&gt;JustSetIP2controllable_do_shift;
	trans: tau { IP2controllable_do_shift = 1; } -&gt;JustSetIP2controllable_do_shift;
	endstate

	state JustSetIP2controllable_do_shift	
	committed;
	trans: tau { LP2state_benchn11 = 1; } -&gt;UpdatedLP2state_benchn11;
	endstate

	state UpdatedLP2state_benchn11	
	committed;
	trans: tau { LP2state_benchr0_out = (1-((1-((1-((1-(LP2state_benchr0_out)) * (LP2state_benchn11))) * (1-(IP2controllable_do_shift)))) * (1-((1-((1-((1-((1-((1-((1-(LP2state_benchr0_out)) * (LP2state_benchn11))) * (1-(IP2sh0)))) * (1-(((LP2state_benchr7_out) * (LP2state_benchn11)) * (IP2sh0))))) * (1-(IP2sh2)))) * (1-((1-((1-(((LP2state_benchr4_out) * (LP2state_benchn11)) * (1-(IP2sh0)))) * (1-(((LP2state_benchr3_out) * (LP2state_benchn11)) * (IP2sh0))))) * (IP2sh2))))) * (IP2controllable_do_shift))))); } -&gt;UpdatedLP2state_benchr0_out;
	endstate

	state UpdatedLP2state_benchr0_out	
	committed;
	trans: tau { LP2state_benchr1_out = (1-((1-(((LP2state_benchr1_out) * (LP2state_benchn11)) * (1-(IP2controllable_do_shift)))) * (1-((1-((1-((1-((1-(((LP2state_benchr1_out) * (LP2state_benchn11)) * (1-(IP2sh0)))) * (1-((1-((1-(LP2state_benchr0_out)) * (LP2state_benchn11))) * (IP2sh0))))) * (1-(IP2sh2)))) * (1-((1-((1-(((LP2state_benchr5_out) * (LP2state_benchn11)) * (1-(IP2sh0)))) * (1-(((LP2state_benchr4_out) * (LP2state_benchn11)) * (IP2sh0))))) * (IP2sh2))))) * (IP2controllable_do_shift))))); } -&gt;UpdatedLP2state_benchr1_out;
	endstate

	state UpdatedLP2state_benchr1_out	
	committed;
	trans: tau { LP2state_benchr2_out = (1-((1-(((LP2state_benchr2_out) * (LP2state_benchn11)) * (1-(IP2controllable_do_shift)))) * (1-((1-((1-((1-((1-(((LP2state_benchr2_out) * (LP2state_benchn11)) * (1-(IP2sh0)))) * (1-(((LP2state_benchr1_out) * (LP2state_benchn11)) * (IP2sh0))))) * (1-(IP2sh2)))) * (1-((1-((1-(((LP2state_benchr6_out) * (LP2state_benchn11)) * (1-(IP2sh0)))) * (1-(((LP2state_benchr5_out) * (LP2state_benchn11)) * (IP2sh0))))) * (IP2sh2))))) * (IP2controllable_do_shift))))); } -&gt;UpdatedLP2state_benchr2_out;
	endstate

	state UpdatedLP2state_benchr2_out	
	committed;
	trans: tau { LP2state_benchr3_out = (1-((1-(((LP2state_benchr3_out) * (LP2state_benchn11)) * (1-(IP2controllable_do_shift)))) * (1-((1-((1-((1-((1-(((LP2state_benchr3_out) * (LP2state_benchn11)) * (1-(IP2sh0)))) * (1-(((LP2state_benchr2_out) * (LP2state_benchn11)) * (IP2sh0))))) * (1-(IP2sh2)))) * (1-((1-((1-(((LP2state_benchr7_out) * (LP2state_benchn11)) * (1-(IP2sh0)))) * (1-(((LP2state_benchr6_out) * (LP2state_benchn11)) * (IP2sh0))))) * (IP2sh2))))) * (IP2controllable_do_shift))))); } -&gt;UpdatedLP2state_benchr3_out;
	endstate

	state UpdatedLP2state_benchr3_out	
	committed;
	trans: tau { LP2state_benchr4_out = (1-((1-(((LP2state_benchr4_out) * (LP2state_benchn11)) * (1-(IP2controllable_do_shift)))) * (1-((1-((1-((1-((1-(((LP2state_benchr4_out) * (LP2state_benchn11)) * (1-(IP2sh0)))) * (1-(((LP2state_benchr3_out) * (LP2state_benchn11)) * (IP2sh0))))) * (1-(IP2sh2)))) * (1-((1-((1-((1-((1-(LP2state_benchr0_out)) * (LP2state_benchn11))) * (1-(IP2sh0)))) * (1-(((LP2state_benchr7_out) * (LP2state_benchn11)) * (IP2sh0))))) * (IP2sh2))))) * (IP2controllable_do_shift))))); } -&gt;UpdatedLP2state_benchr4_out;
	endstate

	state UpdatedLP2state_benchr4_out	
	committed;
	trans: tau { LP2state_benchr5_out = (1-((1-(((LP2state_benchr5_out) * (LP2state_benchn11)) * (1-(IP2controllable_do_shift)))) * (1-((1-((1-((1-((1-(((LP2state_benchr5_out) * (LP2state_benchn11)) * (1-(IP2sh0)))) * (1-(((LP2state_benchr4_out) * (LP2state_benchn11)) * (IP2sh0))))) * (1-(IP2sh2)))) * (1-((1-((1-(((LP2state_benchr1_out) * (LP2state_benchn11)) * (1-(IP2sh0)))) * (1-((1-((1-(LP2state_benchr0_out)) * (LP2state_benchn11))) * (IP2sh0))))) * (IP2sh2))))) * (IP2controllable_do_shift))))); } -&gt;UpdatedLP2state_benchr5_out;
	endstate

	state UpdatedLP2state_benchr5_out	
	committed;
	trans: tau { LP2state_benchr6_out = (1-((1-(((LP2state_benchr6_out) * (LP2state_benchn11)) * (1-(IP2controllable_do_shift)))) * (1-((1-((1-((1-((1-(((LP2state_benchr6_out) * (LP2state_benchn11)) * (1-(IP2sh0)))) * (1-(((LP2state_benchr5_out) * (LP2state_benchn11)) * (IP2sh0))))) * (1-(IP2sh2)))) * (1-((1-((1-(((LP2state_benchr2_out) * (LP2state_benchn11)) * (1-(IP2sh0)))) * (1-(((LP2state_benchr1_out) * (LP2state_benchn11)) * (IP2sh0))))) * (IP2sh2))))) * (IP2controllable_do_shift))))); } -&gt;UpdatedLP2state_benchr6_out;
	endstate

	state UpdatedLP2state_benchr6_out	
	committed;
	trans: tau { LP2state_benchr7_out = (1-((1-(((LP2state_benchr7_out) * (LP2state_benchn11)) * (1-(IP2controllable_do_shift)))) * (1-((1-((1-((1-((1-(((LP2state_benchr7_out) * (LP2state_benchn11)) * (1-(IP2sh0)))) * (1-(((LP2state_benchr6_out) * (LP2state_benchn11)) * (IP2sh0))))) * (1-(IP2sh2)))) * (1-((1-((1-(((LP2state_benchr3_out) * (LP2state_benchn11)) * (1-(IP2sh0)))) * (1-(((LP2state_benchr2_out) * (LP2state_benchn11)) * (IP2sh0))))) * (IP2sh2))))) * (IP2controllable_do_shift))))); } -&gt;UpdatedLP2state_benchr7_out;
	endstate

	state UpdatedLP2state_benchr7_out	
	committed;
	trans: [running0 == 2] release0! { w2=1 } -&gt;w;
	trans: [running1 == 2] release1! { w2=1 } -&gt;w;
	endstate

}
TimedAutomaton Machine0
{

	state idle	
	committed;
	trans: [round == 0 &amp;&amp; w0 == 1] go0! { round = 1;  running0 = 0; } -&gt;busy;
	trans: [round == 0 &amp;&amp; w0 == 0] tau { round = 1; } -&gt;idle;
	trans: [round == 1 &amp;&amp; w1 == 1] go1! { round = 2;  running0 = 1; } -&gt;busy;
	trans: [round == 1 &amp;&amp; w1 == 0] tau { round = 2; } -&gt;idle;
	trans: [round == 2 &amp;&amp; w2 == 1] go2! { round = 0;  running0 = 2; } -&gt;busy;
	trans: [round == 2 &amp;&amp; w2 == 0] tau { round = 0; } -&gt;idle;
	endstate

	state busy	
	trans: release0? { running0 = 2; } -&gt;idle;
	endstate

}
TimedAutomaton Machine1
{

	state idle	
	committed;
	trans: [round == 0 &amp;&amp; w0 == 1] go0! { round = 1;  running1 = 0; } -&gt;busy;
	trans: [round == 0 &amp;&amp; w0 == 0] tau { round = 1; } -&gt;idle;
	trans: [round == 1 &amp;&amp; w1 == 1] go1! { round = 2;  running1 = 1; } -&gt;busy;
	trans: [round == 1 &amp;&amp; w1 == 0] tau { round = 2; } -&gt;idle;
	trans: [round == 2 &amp;&amp; w2 == 1] go2! { round = 0;  running1 = 2; } -&gt;busy;
	trans: [round == 2 &amp;&amp; w2 == 0] tau { round = 0; } -&gt;idle;
	endstate

	state busy	
	trans: release1? { running1 = 2; } -&gt;idle;
	endstate

}
</Declaration><Processes/></TA>
