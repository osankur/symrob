aag 93 4 9 1 80
2
4
6
8
10 1
12 59
14 87
16 115
18 139
20 151
22 163
24 175
26 187
28
28 13 10
30 18 10
32 30 4
34 20 10
36 34 5
38 37 33
40 39 8
42 26 10
44 42 4
46 29 5
48 47 45
50 49 9
52 51 41
54 53 2
56 29 3
58 57 55
60 34 4
62 22 10
64 62 5
66 65 61
68 67 8
70 29 4
72 14 10
74 72 5
76 75 71
78 77 9
80 79 69
82 81 2
84 72 3
86 85 83
88 62 4
90 24 10
92 90 5
94 93 89
96 95 8
98 72 4
100 16 10
102 100 5
104 103 99
106 105 9
108 107 97
110 109 2
112 100 3
114 113 111
116 90 4
118 42 5
120 119 117
122 121 8
124 100 4
126 30 5
128 127 125
130 129 9
132 131 123
134 133 2
136 30 3
138 137 135
140 49 8
142 39 9
144 143 141
146 145 2
148 34 3
150 149 147
152 77 8
154 67 9
156 155 153
158 157 2
160 62 3
162 161 159
164 105 8
166 95 9
168 167 165
170 169 2
172 90 3
174 173 171
176 129 8
178 121 9
180 179 177
182 181 2
184 42 3
186 185 183
i0 controllable_do_shift
i1 sh0
i2 sh1
i3 sh2
l0 state_benchn11
l1 state_benchr0_out
l2 state_benchr1_out
l3 state_benchr2_out
l4 state_benchr3_out
l5 state_benchr4_out
l6 state_benchr5_out
l7 state_benchr6_out
l8 state_benchr7_out
o0 err
c
bench
This file was written by ABC on Sat Aug 31 20:24:53 2013
For information about AIGER format, refer to http://fmv.jku.at/aiger
-------------------------------
This AIGER file has been created by the following sequence of commands:
> vl2mv bs8.v   ---gives--> bs8.mv
> abc -c "read_blif_mv bs8.mv; strash; refactor; rewrite; dfraig; rewrite; dfraig; write_aiger -s bs8y.aig"   ---gives--> bs8y.aig
> aigtoaig bs8y.aig bs8y.aag   ---gives--> bs8y.aag (this file)
Content of bs8.v:
module bench(clk, sh, controllable_do_shift, err);
  input clk;
  input [2:0] sh;
  input controllable_do_shift;
  output err;
  reg[7:0] r;

  wire[7:0] shifted;
  barrel b(r,shifted,sh);

  assign err = ~r[0];

  initial
  begin
    r = 1;
  end

  always @ (posedge clk)
  begin
    r = controllable_do_shift ? shifted : r;
  end
endmodule
  
module barrel(i,o,s);
  input [7:0] i;
  output [7:0] o;
  input [2:0] s;
  wire [7:0] t1;
  wire [7:0] t2;
  
  assign t1 = s[0] ? {i[6:0],i[7:7]} : i;    // shift by 1 pos
  assign t2 = s[1] ? {t1[5:0],t1[7:6]} : t1; // shift by 2 pos
  assign o  = s[2] ? {t1[3:0],t1[7:4]} : t1; // shift by 4 pos
endmodule

-------------------------------
